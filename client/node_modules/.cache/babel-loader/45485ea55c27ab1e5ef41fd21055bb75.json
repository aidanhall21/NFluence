{"ast":null,"code":"export const MINT_UTILITY_COIN = `\nimport FungibleToken from 0x9a0766d93b6608b7\nimport UtilityCoin from 0xUTILITYCOIN\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &UtilityCoin.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer.borrow<&UtilityCoin.Administrator>(from: /storage/UtilityCoinAdmin)\n            ?? panic(\"Signer is not the token admin\")\n\n        self.tokenReceiver = getAccount(recipient)\n            .getCapability(/public/utilityCoinReceiver)\n            .borrow<&UtilityCoin.Vault{FungibleToken.Receiver}>()\n            ?? panic(\"Unable to borrow receiver reference\")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n`;","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft/client/src/flow/mint-utility-coin.tx.js"],"names":["MINT_UTILITY_COIN"],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3BO","sourcesContent":["export const MINT_UTILITY_COIN = `\nimport FungibleToken from 0x9a0766d93b6608b7\nimport UtilityCoin from 0xUTILITYCOIN\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &UtilityCoin.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer.borrow<&UtilityCoin.Administrator>(from: /storage/UtilityCoinAdmin)\n            ?? panic(\"Signer is not the token admin\")\n\n        self.tokenReceiver = getAccount(recipient)\n            .getCapability(/public/utilityCoinReceiver)\n            .borrow<&UtilityCoin.Vault{FungibleToken.Receiver}>()\n            ?? panic(\"Unable to borrow receiver reference\")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n`"]},"metadata":{},"sourceType":"module"}