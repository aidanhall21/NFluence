{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer } from 'react';\nimport { defaultReducer } from '../reducer/defaultReducer';\nexport default function useFUSD() {\n  _s();\n\n  const [state, dispatch] = useReducer(defaultReducer, {\n    loading: true,\n    error: false,\n    data: null\n  });\n  useEffect(() => {\n    getFUSDBalance(); //eslint-disable-next-line \n  }, []);\n\n  const getFUSDBalance = async () => {\n    dispatch({\n      type: 'PROCESSING'\n    });\n\n    try {\n      dispatch({\n        type: 'SUCCESS',\n        payload: \"100.00000000\"\n      });\n    } catch (err) {\n      dispatch({\n        type: 'ERROR'\n      });\n      console.log(err);\n    }\n  };\n\n  return { ...state,\n    getFUSDBalance\n  };\n}\n\n_s(useFUSD, \"8QqmQjtTZ9qbgnff3fC0LgttzHA=\");","map":{"version":3,"sources":["/Users/aidanhall/Desktop/crypto-dappy/src/hooks/use-fusd.hook.js"],"names":["useEffect","useReducer","defaultReducer","useFUSD","state","dispatch","loading","error","data","getFUSDBalance","type","payload","err","console","log"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,UAAU,CAACC,cAAD,EAAiB;AACnDI,IAAAA,OAAO,EAAE,IAD0C;AAEnDC,IAAAA,KAAK,EAAE,KAF4C;AAGnDC,IAAAA,IAAI,EAAE;AAH6C,GAAjB,CAApC;AAMAR,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,cAAc,GADA,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMA,cAAc,GAAG,YAAY;AACjCJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACFL,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,OAAO,EAAE;AAA5B,OAAD,CAAR;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY;AACZP,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,GARD;;AAUA,SAAO,EACL,GAAGR,KADE;AAELK,IAAAA;AAFK,GAAP;AAID;;GA1BuBN,O","sourcesContent":["import { useEffect, useReducer } from 'react'\nimport { defaultReducer } from '../reducer/defaultReducer'\n\nexport default function useFUSD() {\n  const [state, dispatch] = useReducer(defaultReducer, {\n    loading: true,\n    error: false,\n    data: null\n  })\n\n  useEffect(() => {\n    getFUSDBalance();\n    //eslint-disable-next-line \n  }, [])\n\n  const getFUSDBalance = async () => {\n    dispatch({ type: 'PROCESSING' })\n    try {\n      dispatch({ type: 'SUCCESS', payload: \"100.00000000\" })\n    } catch (err) {\n      dispatch({ type: 'ERROR' })\n      console.log(err)\n    }\n  }\n\n  return {\n    ...state,\n    getFUSDBalance\n  }\n}\n"]},"metadata":{},"sourceType":"module"}