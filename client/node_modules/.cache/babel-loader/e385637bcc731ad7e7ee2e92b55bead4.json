{"ast":null,"code":"export const SETUP_FUSD_VAULT = `\n// Mainnet\n// import FungibleToken from \"../contracts/FungibleToken.cdc\"\n// import FUSD from \"../contracts/FUSD.cdc\"\n\n// Testnet\nimport FungibleToken from 0x9a0766d93b6608b7\nimport FUSD from 0xe223d8a629e49c68\n\ntransaction {\n\n  prepare(signer: AuthAccount) {\n\n    // It's OK if the account already has a Vault, but we don't want to replace it\n    if(signer.borrow<&FUSD.Vault>(from: /storage/fusdVault) != nil) {\n      return\n    }\n    \n    // Create a new FUSD Vault and put it in storage\n    signer.save(<-FUSD.createEmptyVault(), to: /storage/fusdVault)\n\n    // Create a public capability to the Vault that only exposes\n    // the deposit function through the Receiver interface\n    signer.link<&FUSD.Vault{FungibleToken.Receiver}>(\n      /public/fusdReceiver,\n      target: /storage/fusdVault\n    )\n\n    // Create a public capability to the Vault that only exposes\n    // the balance field through the Balance interface\n    signer.link<&FUSD.Vault{FungibleToken.Balance}>(\n      /public/fusdBalance,\n      target: /storage/fusdVault\n    )\n  }\n}\n`;","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft/client/src/flow/setup-fusd-vault.tx.js"],"names":["SETUP_FUSD_VAULT"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApCO","sourcesContent":["export const SETUP_FUSD_VAULT = `\n// Mainnet\n// import FungibleToken from \"../contracts/FungibleToken.cdc\"\n// import FUSD from \"../contracts/FUSD.cdc\"\n\n// Testnet\nimport FungibleToken from 0x9a0766d93b6608b7\nimport FUSD from 0xe223d8a629e49c68\n\ntransaction {\n\n  prepare(signer: AuthAccount) {\n\n    // It's OK if the account already has a Vault, but we don't want to replace it\n    if(signer.borrow<&FUSD.Vault>(from: /storage/fusdVault) != nil) {\n      return\n    }\n    \n    // Create a new FUSD Vault and put it in storage\n    signer.save(<-FUSD.createEmptyVault(), to: /storage/fusdVault)\n\n    // Create a public capability to the Vault that only exposes\n    // the deposit function through the Receiver interface\n    signer.link<&FUSD.Vault{FungibleToken.Receiver}>(\n      /public/fusdReceiver,\n      target: /storage/fusdVault\n    )\n\n    // Create a public capability to the Vault that only exposes\n    // the balance field through the Balance interface\n    signer.link<&FUSD.Vault{FungibleToken.Balance}>(\n      /public/fusdBalance,\n      target: /storage/fusdVault\n    )\n  }\n}\n`"]},"metadata":{},"sourceType":"module"}