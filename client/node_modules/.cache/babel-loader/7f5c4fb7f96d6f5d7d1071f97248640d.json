{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { mutate, query, tx } from \"@onflow/fcl\";\nimport { useEffect, useReducer } from \"react\";\nimport { CHECK_COLLECTION } from '../flow/check-collection.script';\nimport { INIT_ACCOUNT } from \"../flow/init-account.tx\";\nimport { defaultReducer } from \"../reducer/defaultReducer\";\nexport default function useCollection(user) {\n  _s();\n\n  const [state, dispatch] = useReducer(defaultReducer, {\n    loading: false,\n    error: false,\n    data: false\n  });\n\n  const checkCollection = async () => {\n    dispatch({\n      type: 'PROCESSING'\n    });\n    console.log(user === null || user === void 0 ? void 0 : user.addr);\n\n    try {\n      let res = await query({\n        cadence: CHECK_COLLECTION,\n        args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address)]\n      });\n      dispatch({\n        type: 'SUCCESS',\n        payload: res\n      });\n    } catch (err) {\n      console.log(err);\n      dispatch({\n        type: 'ERROR'\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (!(user === null || user === void 0 ? void 0 : user.addr)) return;\n    checkCollection(); //eslint-disable-next-line\n  }, [user]);\n\n  const createCollection = async () => {\n    dispatch({\n      type: 'PROCESSING'\n    });\n\n    try {\n      let res = await mutate({\n        cadence: INIT_ACCOUNT,\n        limit: 55\n      });\n      await tx(res).onceSealed();\n      dispatch({\n        type: 'SUCCESS',\n        payload: true\n      });\n    } catch (err) {\n      console.log(err);\n      dispatch({\n        type: 'ERROR'\n      });\n    }\n  };\n\n  return { ...state,\n    checkCollection,\n    createCollection\n  };\n}\n\n_s(useCollection, \"10syLh5yqdWGoeyoJB0ITyK47B0=\");","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft/client/src/hooks/use-collection.hook.js"],"names":["mutate","query","tx","useEffect","useReducer","CHECK_COLLECTION","INIT_ACCOUNT","defaultReducer","useCollection","user","state","dispatch","loading","error","data","checkCollection","type","console","log","addr","res","cadence","args","arg","t","Address","payload","err","createCollection","limit","onceSealed"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAwBC,EAAxB,QAAkC,aAAlC;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,eAAe,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAAA;;AACxC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,UAAU,CAACG,cAAD,EAAiB;AACjDK,IAAAA,OAAO,EAAE,KADwC;AAEjDC,IAAAA,KAAK,EAAE,KAF0C;AAGjDC,IAAAA,IAAI,EAAE;AAH2C,GAAjB,CAApC;;AAMA,QAAMC,eAAe,GAAG,YAAY;AAChCJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ,aAAYA,IAAZ,uBAAYA,IAAI,CAAEU,IAAlB;;AACA,QAAI;AACA,UAAIC,GAAG,GAAG,MAAMnB,KAAK,CAAC;AAClBoB,QAAAA,OAAO,EAAEhB,gBADS;AAElBiB,QAAAA,IAAI,EAAE,CAACC,GAAD,EAAMC,CAAN,KAAY,CAACD,GAAG,CAACd,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEU,IAAP,EAAaK,CAAC,CAACC,OAAf,CAAJ;AAFA,OAAD,CAArB;AAIAd,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE,SAAR;AAAmBU,QAAAA,OAAO,EAAEN;AAA5B,OAAD,CAAR;AACH,KAND,CAME,OAAOO,GAAP,EAAY;AACVV,MAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACAhB,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACH;AACJ,GAbD;;AAeAb,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,EAACM,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEU,IAAP,CAAH,EAAgB;AAChBJ,IAAAA,eAAe,GAFH,CAGZ;AACH,GAJQ,EAIN,CAACN,IAAD,CAJM,CAAT;;AAMA,QAAMmB,gBAAgB,GAAG,YAAY;AACjCjB,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACA,UAAII,GAAG,GAAG,MAAMpB,MAAM,CAAC;AACnBqB,QAAAA,OAAO,EAAEf,YADU;AAEnBuB,QAAAA,KAAK,EAAE;AAFY,OAAD,CAAtB;AAIA,YAAM3B,EAAE,CAACkB,GAAD,CAAF,CAAQU,UAAR,EAAN;AACAnB,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE,SAAR;AAAmBU,QAAAA,OAAO,EAAE;AAA5B,OAAD,CAAR;AACH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACVV,MAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACAhB,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACH;AACJ,GAbD;;AAeA,SAAO,EACH,GAAGN,KADA;AAEHK,IAAAA,eAFG;AAGHa,IAAAA;AAHG,GAAP;AAKH;;GAhDuBpB,a","sourcesContent":["import { mutate, query, tx } from \"@onflow/fcl\";\nimport { useEffect, useReducer } from \"react\";\nimport { CHECK_COLLECTION } from '../flow/check-collection.script'\nimport { INIT_ACCOUNT } from \"../flow/init-account.tx\";\nimport { defaultReducer } from \"../reducer/defaultReducer\";\n\nexport default function useCollection(user) {\n    const [state, dispatch] = useReducer(defaultReducer, {\n        loading: false,\n        error: false,\n        data: false\n    })\n\n    const checkCollection = async () => {\n        dispatch({ type: 'PROCESSING' })\n        console.log(user?.addr)\n        try {\n            let res = await query({\n                cadence: CHECK_COLLECTION,\n                args: (arg, t) => [arg(user?.addr, t.Address)]\n            })\n            dispatch({ type: 'SUCCESS', payload: res })\n        } catch (err) {\n            console.log(err)\n            dispatch({ type: 'ERROR' })\n        }\n    }\n\n    useEffect(() => {\n        if(!user?.addr) return\n        checkCollection()\n        //eslint-disable-next-line\n    }, [user])\n\n    const createCollection = async () => {\n        dispatch({ type: 'PROCESSING' })\n        try {\n            let res = await mutate({\n                cadence: INIT_ACCOUNT,\n                limit: 55\n            })\n            await tx(res).onceSealed()\n            dispatch({ type: 'SUCCESS', payload: true })\n        } catch (err) {\n            console.log(err)\n            dispatch({ type: 'ERROR' })\n        }\n    }\n\n    return {\n        ...state,\n        checkCollection,\n        createCollection,\n    }\n}"]},"metadata":{},"sourceType":"module"}