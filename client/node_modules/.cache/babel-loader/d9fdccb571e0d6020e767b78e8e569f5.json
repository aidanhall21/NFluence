{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer } from 'react';\nimport { userDappyReducer } from '../reducer/userDappyReducer';\nimport DappyClass from '../utils/DappyClass';\nimport { DEFAULT_DAPPIES } from '../config/dappies.config';\nexport default function useUserDappies() {\n  _s();\n\n  const [state, dispatch] = useReducer(userDappyReducer, {\n    oading: false,\n    error: false,\n    data: []\n  });\n  useEffect(() => {\n    const fetchUserDappies = async () => {\n      dispatch({\n        type: 'PROCESSING'\n      });\n\n      try {\n        dispatch({\n          type: 'SUCCESS',\n          payload: []\n        });\n      } catch (err) {\n        dispatch({\n          type: 'ERROR'\n        });\n      }\n    };\n\n    fetchUserDappies(); //eslint-disable-next-line\n  }, []);\n\n  const mintDappy = async (templateID, amount) => {\n    try {\n      await addDappy(templateID);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const addDappy = async templateID => {\n    try {\n      const dappy = DEFAULT_DAPPIES.find(d => (d === null || d === void 0 ? void 0 : d.templateID) === templateID);\n      const newDappy = new DappyClass(dappy.templateID, dappy.dna, dappy.name);\n      dispatch({\n        type: 'ADD',\n        payload: newDappy\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const batchAddDappies = async dappies => {\n    try {\n      const allDappies = DEFAULT_DAPPIES;\n      const dappyToAdd = allDappies.filter(d => dappies.includes(d === null || d === void 0 ? void 0 : d.templateID));\n      const newDappies = dappyToAdd.map(d => new DappyClass(d.templateID, d.dna, d.name));\n\n      for (let index = 0; index < newDappies.length; index++) {\n        const element = newDappies[index];\n        dispatch({\n          type: 'ADD',\n          payload: element\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return { ...state,\n    mintDappy,\n    addDappy,\n    batchAddDappies\n  };\n}\n\n_s(useUserDappies, \"8zmip5K9FlXMk66LQjLB8bAzK3Q=\");","map":{"version":3,"sources":["/Users/aidanhall/Desktop/crypto-dappy/src/hooks/use-user-dappies.hook.js"],"names":["useEffect","useReducer","userDappyReducer","DappyClass","DEFAULT_DAPPIES","useUserDappies","state","dispatch","oading","error","data","fetchUserDappies","type","payload","err","mintDappy","templateID","amount","addDappy","console","log","dappy","find","d","newDappy","dna","name","batchAddDappies","dappies","allDappies","dappyToAdd","filter","includes","newDappies","map","index","length","element"],"mappings":"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","sourcesContent":["import { useEffect, useReducer } from 'react'\nimport { userDappyReducer } from '../reducer/userDappyReducer'\nimport DappyClass from '../utils/DappyClass'\nimport { DEFAULT_DAPPIES } from '../config/dappies.config'\n\nexport default function useUserDappies() {\n  const [state, dispatch] = useReducer(userDappyReducer, {\n    oading: false,\n    error: false,\n    data: []\n  })\n\n  useEffect(() => {\n    const fetchUserDappies = async () => {\n      dispatch({ type: 'PROCESSING' })\n      try {\n        dispatch({ type: 'SUCCESS', payload: [] })\n      } catch (err) {\n        dispatch({ type: 'ERROR' })\n      }\n    }\n    fetchUserDappies()\n    //eslint-disable-next-line\n  }, [])\n\n  const mintDappy = async (templateID, amount) => {\n    try {\n      await addDappy(templateID)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const addDappy = async (templateID) => {\n    try {\n      const dappy = DEFAULT_DAPPIES.find(d => d?.templateID === templateID)\n      const newDappy = new DappyClass(dappy.templateID, dappy.dna, dappy.name)\n      dispatch({ type: 'ADD', payload: newDappy })\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const batchAddDappies = async (dappies) => {\n    try {\n      const allDappies = DEFAULT_DAPPIES\n      const dappyToAdd = allDappies.filter(d => dappies.includes(d?.templateID))\n      const newDappies = dappyToAdd.map(d => new DappyClass(d.templateID, d.dna, d.name))\n      for (let index = 0; index < newDappies.length; index++) {\n        const element = newDappies[index];\n        dispatch({ type: 'ADD', payload: element })\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  return {\n    ...state,\n    mintDappy,\n    addDappy,\n    batchAddDappies\n  }\n}\n"]},"metadata":{},"sourceType":"module"}