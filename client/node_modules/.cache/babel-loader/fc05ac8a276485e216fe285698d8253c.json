{"ast":null,"code":"var _jsxFileName = \"/Users/aidanhall/Desktop/nsft/client/src/components/Bid/index.js\";\nimport React, { useState } from \"react\";\nimport cn from \"classnames\";\nimport styles from \"./Bid.module.sass\";\nimport Form from \"../Form\";\nimport { formatAmountInput } from \"../../mocks/functions\";\nimport { useParams } from \"react-router\";\nimport { useUser } from \"../../providers/UserProvider\";\nimport Loader from \"../Loader\";\nimport { getBidPlacedEvents } from \"../../flow/query-event.script.script\";\nimport axios from \"axios\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport CheckoutForm from \"./CheckoutForm\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst promise = loadStripe(\"pk_test_51JhdSpJoN02dbjVUt1SXae4LgPPPw6vsD6TlVnaPDNe2Aex3tTm81xihPLp9gnwfSDLDcKz43qsjulWSsP7uPdfg00FJvIdwbs\");\n/*\nconst items = [\n  {\n    title: \"Enter bid\",\n    value: \"ETH\",\n  },\n  {\n    title: \"Your balance\",\n    value: \"8.498 ETH\",\n  },\n  {\n    title: \"Service fee\",\n    value: \"0 ETH\",\n  },\n  {\n    title: \"Total bid amount\",\n    value: \"0 ETH\",\n  },\n];\n*/\n\nlet api_node;\nprocess.env.NODE_ENV === \"production\" ? api_node = '' : api_node = process.env.REACT_APP_LOCAL_API_NODE;\n\nconst Bid = ({\n  className,\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Elements, {\n      stripe: promise,\n      children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n  /*\n  const [bid, setBid] = useState(false)\n  const [nofunds, setNofunds] = useState(false)\n   const { address, nftid } = useParams()\n  const { bidOnAuction, balance, loading, error, status, getBalance, user } = useUser()\n   const handleSubmit = async (e) => {\n    e.preventDefault();\n    setNofunds(false)\n    if (balance < parseInt(bid)) {\n      setNofunds(true)\n      return\n    }\n    await bidOnAuction(parseInt(nftid), address, formatAmountInput(bid));\n    await getBalance()\n    let events = await getBidPlacedEvents()\n    console.log(events)\n    let userBids = events.filter(event => event.data.user === user?.addr)\n    const userBidData = userBids[userBids.length - 1]\n    console.log(userBidData)\n    await axios.post(`${api_node}/api/v1/bid`, {\n      blockheight: userBidData.blockHeight, \n      blockid: userBidData.blockId, \n      blocktime: userBidData.blockTimestamp, \n      tokenid: userBidData.data.tokenID,\n      biddinguser: userBidData.data.user, \n      price: userBidData.data.bidPrice, \n      auctionuser: address\n    })\n  };\n    return (\n    \n    <div className={cn(className, styles.checkout)}>\n      <div className={cn(\"h4\", styles.title)}>Place a bid</div>\n      <div className={styles.info}>\n        You are about to bid on <strong>{data.title}</strong>\n      </div>\n      <div className={styles.text}>\n            You'll need to confirm the transaction in the next popup.\n          </div>\n      <div className={styles.text}>\n            Minimum bid ${parseInt(data.minNextBid).toString()}\n          </div>\n      <div className={styles.table}>\n        <div className={styles.row}>\n          <Form\n            className={styles.form}\n            onSubmit={handleSubmit}\n            value={bid}\n            placeholder=\"Bid Amount\"\n            setValue={setBid}\n            type=\"number\"\n            name=\"bid\"\n            step={1}\n            min={parseInt(data.minNextBid)}\n          />\n        </div>\n      </div>\n          {nofunds && (<div className={styles.text}>\n            You do not have the funds available to submit this bid\n          </div>)}\n      {loading ? (\n        <div className={styles.item}>\n          <button className={cn(\"button loading\", styles.button)}>\n            <Loader className={styles.loader} color=\"white\" />\n          </button>\n        </div>\n      ) : (error ? (\n        <div className={cn(styles.item, styles.error)}>\n          <button className={cn(\"button error\", styles.button)}>Something went wrong :(</button>\n        </div>\n      ) :\n        (status.status === 4 ? (\n          <div className={cn(styles.item, styles.done)}>\n          <button className={cn(\"button done\", styles.button)}>Success! Your bid has been submitted</button>\n        </div>\n        ) : (<div className={styles.btns}>\n          <button\n            className={cn(\"button\", styles.button)}\n            onClick={handleSubmit}\n          >\n            Place a bid\n          </button>\n        </div>))\n      )}\n    </div>\n  );\n  */\n};\n\n_c = Bid;\nexport default Bid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bid\");","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft/client/src/components/Bid/index.js"],"names":["React","useState","cn","styles","Form","formatAmountInput","useParams","useUser","Loader","getBidPlacedEvents","axios","loadStripe","Elements","CheckoutForm","promise","api_node","process","env","NODE_ENV","REACT_APP_LOCAL_API_NODE","Bid","className","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,kBAAT,QAAmC,sCAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAO,WAAP;;AAEA,MAAMC,OAAO,GAAGH,UAAU,CAAC,6GAAD,CAA1B;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAII,QAAJ;AACAC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACIH,QAAQ,GAAG,EADf,GAEIA,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYE,wBAF3B;;AAIA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAyB;AAEnC,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,MAAM,EAAER,OAAlB;AAAA,6BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKC,CApGD;;KAAMM,G;AAsGN,eAAeA,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport cn from \"classnames\";\nimport styles from \"./Bid.module.sass\";\nimport Form from \"../Form\";\nimport { formatAmountInput } from \"../../mocks/functions\";\nimport { useParams } from \"react-router\";\nimport { useUser } from \"../../providers/UserProvider\";\nimport Loader from \"../Loader\";\nimport { getBidPlacedEvents } from \"../../flow/query-event.script.script\"\nimport axios from \"axios\";\nimport { loadStripe } from \"@stripe/stripe-js\"\nimport { Elements } from \"@stripe/react-stripe-js\"\nimport CheckoutForm from \"./CheckoutForm\";\nimport \"./App.css\"\n\nconst promise = loadStripe(\"pk_test_51JhdSpJoN02dbjVUt1SXae4LgPPPw6vsD6TlVnaPDNe2Aex3tTm81xihPLp9gnwfSDLDcKz43qsjulWSsP7uPdfg00FJvIdwbs\");\n\n\n/*\nconst items = [\n  {\n    title: \"Enter bid\",\n    value: \"ETH\",\n  },\n  {\n    title: \"Your balance\",\n    value: \"8.498 ETH\",\n  },\n  {\n    title: \"Service fee\",\n    value: \"0 ETH\",\n  },\n  {\n    title: \"Total bid amount\",\n    value: \"0 ETH\",\n  },\n];\n*/\n\nlet api_node;\nprocess.env.NODE_ENV === \"production\"\n  ? api_node = ''\n  : api_node = process.env.REACT_APP_LOCAL_API_NODE\n\nconst Bid = ({ className, data }) => {\n\n  return (\n    <div className=\"App\">\n      <Elements stripe={promise}>\n        <CheckoutForm />\n      </Elements>\n    </div>\n  )\n  /*\n  const [bid, setBid] = useState(false)\n  const [nofunds, setNofunds] = useState(false)\n\n  const { address, nftid } = useParams()\n  const { bidOnAuction, balance, loading, error, status, getBalance, user } = useUser()\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setNofunds(false)\n    if (balance < parseInt(bid)) {\n      setNofunds(true)\n      return\n    }\n    await bidOnAuction(parseInt(nftid), address, formatAmountInput(bid));\n    await getBalance()\n    let events = await getBidPlacedEvents()\n    console.log(events)\n    let userBids = events.filter(event => event.data.user === user?.addr)\n    const userBidData = userBids[userBids.length - 1]\n    console.log(userBidData)\n    await axios.post(`${api_node}/api/v1/bid`, {\n      blockheight: userBidData.blockHeight, \n      blockid: userBidData.blockId, \n      blocktime: userBidData.blockTimestamp, \n      tokenid: userBidData.data.tokenID,\n      biddinguser: userBidData.data.user, \n      price: userBidData.data.bidPrice, \n      auctionuser: address\n    })\n  };\n\n\n  return (\n    \n    <div className={cn(className, styles.checkout)}>\n      <div className={cn(\"h4\", styles.title)}>Place a bid</div>\n      <div className={styles.info}>\n        You are about to bid on <strong>{data.title}</strong>\n      </div>\n      <div className={styles.text}>\n            You'll need to confirm the transaction in the next popup.\n          </div>\n      <div className={styles.text}>\n            Minimum bid ${parseInt(data.minNextBid).toString()}\n          </div>\n      <div className={styles.table}>\n        <div className={styles.row}>\n          <Form\n            className={styles.form}\n            onSubmit={handleSubmit}\n            value={bid}\n            placeholder=\"Bid Amount\"\n            setValue={setBid}\n            type=\"number\"\n            name=\"bid\"\n            step={1}\n            min={parseInt(data.minNextBid)}\n          />\n        </div>\n      </div>\n          {nofunds && (<div className={styles.text}>\n            You do not have the funds available to submit this bid\n          </div>)}\n      {loading ? (\n        <div className={styles.item}>\n          <button className={cn(\"button loading\", styles.button)}>\n            <Loader className={styles.loader} color=\"white\" />\n          </button>\n        </div>\n      ) : (error ? (\n        <div className={cn(styles.item, styles.error)}>\n          <button className={cn(\"button error\", styles.button)}>Something went wrong :(</button>\n        </div>\n      ) :\n        (status.status === 4 ? (\n          <div className={cn(styles.item, styles.done)}>\n          <button className={cn(\"button done\", styles.button)}>Success! Your bid has been submitted</button>\n        </div>\n        ) : (<div className={styles.btns}>\n          <button\n            className={cn(\"button\", styles.button)}\n            onClick={handleSubmit}\n          >\n            Place a bid\n          </button>\n        </div>))\n      )}\n    </div>\n  );\n  */\n};\n\nexport default Bid;\n"]},"metadata":{},"sourceType":"module"}