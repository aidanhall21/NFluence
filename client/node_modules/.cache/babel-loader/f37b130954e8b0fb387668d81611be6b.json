{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer } from \"react\";\nimport { userNsftReducer } from \"../reducer/userNsftReducer\";\nimport { mutate, query, tx } from '@onflow/fcl'; //import { useTxs } from \"../providers/TxProvider\";\n\nimport { LIST_USER_OWNED_NFTS } from \"../flow/list-user-minted-nft.script\";\nimport { MINT_NSFT } from \"../flow/mint-nsft.tx\";\nimport { authorizationFunction } from \"../services/authorization-function\";\nimport { GET_BALANCE } from \"../flow/get-balance.script\";\nimport { GET_TOKEN_DATA } from \"../flow/get-token-data.script\";\nexport default function useUserNsfts(user, collection) {\n  _s();\n\n  const [state, dispatch] = useReducer(userNsftReducer, {\n    loading: false,\n    error: false,\n    data: []\n  }); //const { addTx } = useTxs()\n  //const { checkCollection } = useCollection()\n\n  useEffect(() => {\n    if (!(user === null || user === void 0 ? void 0 : user.addr)) return;\n\n    const fetchUserMintedNsfts = async () => {\n      dispatch({\n        type: 'PROCESSING'\n      });\n\n      try {\n        let res = await query({\n          cadence: GET_TOKEN_DATA,\n          args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address), arg(0, t.UInt64)]\n        });\n        console.log(res);\n        let minted_nsfts = res.filter(token => token.creatorAddress === (user === null || user === void 0 ? void 0 : user.addr));\n        dispatch({\n          type: 'SUCCESS',\n          payload: minted_nsfts\n        });\n      } catch (err) {\n        console.log(err);\n        dispatch({\n          type: 'ERROR'\n        });\n      }\n    };\n\n    console.log('fetching!!');\n    fetchUserMintedNsfts(); //eslint-disable-next-line\n  }, [user]);\n\n  const mintNsft = async (cid, fileType, title, description, editionSize) => {\n    dispatch({\n      type: 'PROCESSING'\n    });\n    console.log(state.loading);\n\n    try {\n      let res = await mutate({\n        cadence: MINT_NSFT,\n        args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address), arg(cid, t.String), arg(fileType, t.UInt8), arg(title, t.String), arg(description, t.String), arg(editionSize, t.UInt16)],\n        limit: 500,\n        authz: authorizationFunction\n      }); //addTx(res)\n\n      let txStatus = await tx(res).onceSealed();\n      dispatch({\n        type: 'SUCCESS',\n        payload: txStatus\n      });\n      console.log(state.loading);\n      return txStatus;\n    } catch (err) {\n      console.log(err);\n      dispatch({\n        type: 'ERROR'\n      });\n    }\n  };\n\n  return { ...state,\n    mintNsft\n  };\n}\n\n_s(useUserNsfts, \"1htARhFWJ5f/JVr2mTFL5H8EFcg=\");","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft/client/src/hooks/use-user-nsfts.hook.js"],"names":["useEffect","useReducer","userNsftReducer","mutate","query","tx","LIST_USER_OWNED_NFTS","MINT_NSFT","authorizationFunction","GET_BALANCE","GET_TOKEN_DATA","useUserNsfts","user","collection","state","dispatch","loading","error","data","addr","fetchUserMintedNsfts","type","res","cadence","args","arg","t","Address","UInt64","console","log","minted_nsfts","filter","token","creatorAddress","payload","err","mintNsft","cid","fileType","title","description","editionSize","String","UInt8","UInt16","limit","authz","txStatus","onceSealed"],"mappings":"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","sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport { userNsftReducer } from \"../reducer/userNsftReducer\";\nimport { mutate, query, tx } from '@onflow/fcl';\n//import { useTxs } from \"../providers/TxProvider\";\nimport { LIST_USER_OWNED_NFTS } from \"../flow/list-user-minted-nft.script\";\nimport { MINT_NSFT } from \"../flow/mint-nsft.tx\";\nimport { authorizationFunction } from \"../services/authorization-function\";\nimport { GET_BALANCE } from \"../flow/get-balance.script\";\nimport { GET_TOKEN_DATA } from \"../flow/get-token-data.script\";\n\nexport default function useUserNsfts(user, collection) {\n    const [state, dispatch] = useReducer(userNsftReducer, {\n        loading: false,\n        error: false,\n        data: []\n    })\n\n    //const { addTx } = useTxs()\n    //const { checkCollection } = useCollection()\n\n    useEffect(() => {\n        if(!user?.addr) return\n        const fetchUserMintedNsfts = async () => {\n            dispatch({ type: 'PROCESSING' })\n            try {\n                let res = await query({\n                    cadence: GET_TOKEN_DATA,\n                    args: (arg, t) => [arg(user?.addr, t.Address), arg(0, t.UInt64)]\n                })\n                console.log(res)\n                let minted_nsfts = res.filter(token => token.creatorAddress === user?.addr)\n                dispatch({ type: 'SUCCESS', payload: minted_nsfts })\n            } catch (err) {\n                console.log(err)\n                dispatch({ type: 'ERROR' })\n            }\n        }\n        console.log('fetching!!')\n        fetchUserMintedNsfts()\n        //eslint-disable-next-line\n    }, [user])\n\n    const mintNsft = async (cid, fileType, title, description, editionSize) => {\n        dispatch({ type: 'PROCESSING' })\n        console.log(state.loading)\n        try {\n            let res = await mutate({\n                cadence: MINT_NSFT,\n                args: (arg, t) => [\n                    arg(user?.addr, t.Address),\n                    arg(cid, t.String),\n                    arg(fileType, t.UInt8),\n                    arg(title, t.String),\n                    arg(description, t.String),\n                    arg(editionSize, t.UInt16),\n                  ],\n                  limit: 500,\n                  authz: authorizationFunction\n            })\n            //addTx(res)\n            let txStatus = await tx(res).onceSealed()\n            dispatch({ type: 'SUCCESS', payload: txStatus })\n            console.log(state.loading)\n            return txStatus\n        } catch(err) {\n            console.log(err)\n            dispatch({ type: 'ERROR' })\n        }\n    }\n\n    return {\n        ...state,\n        mintNsft\n    }\n}"]},"metadata":{},"sourceType":"module"}