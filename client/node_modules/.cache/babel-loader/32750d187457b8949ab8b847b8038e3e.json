{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { mutate, query, tx } from \"@onflow/fcl\";\nimport { useEffect, useState } from \"react\";\nimport { CHECK_COLLECTION } from '../flow/check-collection.script';\nimport { INIT_ACCOUNT } from \"../flow/init-account.tx\";\nexport default function useCollection(user) {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [collection, setCollection] = useState(false);\n\n  const checkCollection = async () => {\n    console.log(user === null || user === void 0 ? void 0 : user.addr);\n\n    try {\n      let res = await query({\n        cadence: CHECK_COLLECTION,\n        args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address)]\n      });\n      setCollection(res);\n      console.log(res);\n      setLoading(false);\n    } catch (err) {\n      console.log(err);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!(user === null || user === void 0 ? void 0 : user.addr)) return;\n    console.log('checking collection');\n    checkCollection(); //eslint-disable-next-line\n  }, []);\n\n  const createCollection = async () => {\n    try {\n      let res = await mutate({\n        cadence: INIT_ACCOUNT,\n        limit: 55\n      });\n      await tx(res).onceSealed();\n      setCollection(true);\n    } catch (err) {\n      console.log(err);\n      setLoading(false);\n    }\n  };\n\n  return {\n    loading,\n    collection,\n    checkCollection,\n    createCollection\n  };\n}\n\n_s(useCollection, \"CpdQmOeNjxT3mncrSAx6rB1ifWM=\");","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft-v3/client/src/hooks/use-collection.hook.js"],"names":["mutate","query","tx","useEffect","useState","CHECK_COLLECTION","INIT_ACCOUNT","useCollection","user","loading","setLoading","collection","setCollection","checkCollection","console","log","addr","res","cadence","args","arg","t","Address","err","createCollection","limit","onceSealed"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAwBC,EAAxB,QAAkC,aAAlC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,YAAT,QAA6B,yBAA7B;AAEA,eAAe,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAAA;;AACxC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMS,eAAe,GAAG,YAAY;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ,aAAYA,IAAZ,uBAAYA,IAAI,CAAEQ,IAAlB;;AACA,QAAI;AACA,UAAIC,GAAG,GAAG,MAAMhB,KAAK,CAAC;AAClBiB,QAAAA,OAAO,EAAEb,gBADS;AAElBc,QAAAA,IAAI,EAAE,CAACC,GAAD,EAAMC,CAAN,KAAY,CAACD,GAAG,CAACZ,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEQ,IAAP,EAAaK,CAAC,CAACC,OAAf,CAAJ;AAFA,OAAD,CAArB;AAIAV,MAAAA,aAAa,CAACK,GAAD,CAAb;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACAP,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KARD,CAQE,OAAOa,GAAP,EAAY;AACVT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACAb,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,GAdD;;AAgBAP,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,EAACK,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEQ,IAAP,CAAH,EAAgB;AAChBF,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAF,IAAAA,eAAe,GAHH,CAIZ;AACH,GALQ,EAKN,EALM,CAAT;;AAOA,QAAMW,gBAAgB,GAAG,YAAY;AACjC,QAAI;AACA,UAAIP,GAAG,GAAG,MAAMjB,MAAM,CAAC;AACnBkB,QAAAA,OAAO,EAAEZ,YADU;AAEnBmB,QAAAA,KAAK,EAAE;AAFY,OAAD,CAAtB;AAIA,YAAMvB,EAAE,CAACe,GAAD,CAAF,CAAQS,UAAR,EAAN;AACAd,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH,KAPD,CAOE,OAAOW,GAAP,EAAY;AACVT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACAb,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,GAZD;;AAcA,SAAO;AACHD,IAAAA,OADG;AAEHE,IAAAA,UAFG;AAGHE,IAAAA,eAHG;AAIHW,IAAAA;AAJG,GAAP;AAMH;;GA/CuBjB,a","sourcesContent":["import { mutate, query, tx } from \"@onflow/fcl\";\nimport { useEffect, useState } from \"react\";\nimport { CHECK_COLLECTION } from '../flow/check-collection.script'\nimport { INIT_ACCOUNT } from \"../flow/init-account.tx\";\n\nexport default function useCollection(user) {\n    const [loading, setLoading] = useState(true)\n    const [collection, setCollection] = useState(false)\n\n    const checkCollection = async () => {\n        console.log(user?.addr)\n        try {\n            let res = await query({\n                cadence: CHECK_COLLECTION,\n                args: (arg, t) => [arg(user?.addr, t.Address)]\n            })\n            setCollection(res)\n            console.log(res)\n            setLoading(false)\n        } catch (err) {\n            console.log(err)\n            setLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        if(!user?.addr) return\n        console.log('checking collection')\n        checkCollection()\n        //eslint-disable-next-line\n    }, [])\n\n    const createCollection = async () => {\n        try {\n            let res = await mutate({\n                cadence: INIT_ACCOUNT,\n                limit: 55\n            })\n            await tx(res).onceSealed()\n            setCollection(true)\n        } catch (err) {\n            console.log(err)\n            setLoading(false)\n        }\n    }\n\n    return {\n        loading,\n        collection,\n        checkCollection,\n        createCollection,\n    }\n}"]},"metadata":{},"sourceType":"module"}