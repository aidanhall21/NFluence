{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { mutate, query, tx } from \"@onflow/fcl\";\nimport { useEffect, useReducer } from \"react\";\nimport { CREATE_COIN_VAULT } from \"../flow/init-account.tx\";\nimport { GET_BALANCE } from \"../flow/get-balance.script\";\nimport { defaultReducer } from \"../reducer/defaultReducer\";\nexport default function useCurrency(user) {\n  _s();\n\n  const [state, dispatch] = useReducer(defaultReducer, {\n    loading: true,\n    error: false,\n    data: '0.00000000'\n  });\n  useEffect(() => {\n    getBalance(); //eslint-disable-next-line\n  }, [user === null || user === void 0 ? void 0 : user.addr]);\n\n  const getBalance = async () => {\n    dispatch({\n      type: 'PROCESSING'\n    });\n\n    try {\n      let response = await query({\n        cadence: GET_BALANCE,\n        args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address)]\n      });\n      dispatch({\n        type: 'SUCCESS',\n        payload: response\n      });\n    } catch (err) {\n      dispatch({\n        type: 'ERROR'\n      });\n    }\n  };\n\n  const createVault = async () => {\n    dispatch({\n      type: 'PROCESSING'\n    });\n\n    try {\n      let response = await mutate({\n        cadence: CREATE_COIN_VAULT\n      });\n      await tx(response).onceSealed();\n      dispatch({\n        type: 'SUCCESS'\n      });\n    } catch (err) {\n      dispatch({\n        type: 'ERROR'\n      });\n      console.log(err);\n    }\n  };\n\n  return { ...state,\n    createVault,\n    getBalance\n  };\n}\n\n_s(useCurrency, \"A3Q2BgQIdGNODurgx8dtnrOQlTs=\");","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft-v3/client/src/hooks/use-currency.hook.js"],"names":["mutate","query","tx","useEffect","useReducer","CREATE_COIN_VAULT","GET_BALANCE","defaultReducer","useCurrency","user","state","dispatch","loading","error","data","getBalance","addr","type","response","cadence","args","arg","t","Address","payload","err","createVault","onceSealed","console","log"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAwBC,EAAxB,QAAkC,aAAlC;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,eAAe,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAAA;;AACtC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,UAAU,CAACG,cAAD,EAAiB;AACjDK,IAAAA,OAAO,EAAE,IADwC;AAEjDC,IAAAA,KAAK,EAAE,KAF0C;AAGjDC,IAAAA,IAAI,EAAE;AAH2C,GAAjB,CAApC;AAMAX,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,UAAU,GADE,CAEZ;AACH,GAHQ,EAGN,CAACN,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEO,IAAP,CAHM,CAAT;;AAKA,QAAMD,UAAU,GAAG,YAAY;AAC3BJ,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACA,UAAIC,QAAQ,GAAG,MAAMjB,KAAK,CAAC;AACvBkB,QAAAA,OAAO,EAAEb,WADc;AAEvBc,QAAAA,IAAI,EAAE,CAACC,GAAD,EAAMC,CAAN,KAAY,CAACD,GAAG,CAACZ,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEO,IAAP,EAAaM,CAAC,CAACC,OAAf,CAAJ;AAFK,OAAD,CAA1B;AAIAZ,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAE,SAAR;AAAmBO,QAAAA,OAAO,EAAEN;AAA5B,OAAD,CAAR;AACH,KAND,CAME,OAAOO,GAAP,EAAY;AACVd,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACH;AACJ,GAXD;;AAaA,QAAMS,WAAW,GAAG,YAAY;AAC5Bf,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACA,UAAIC,QAAQ,GAAG,MAAMlB,MAAM,CAAC;AACxBmB,QAAAA,OAAO,EAAEd;AADe,OAAD,CAA3B;AAGA,YAAMH,EAAE,CAACgB,QAAD,CAAF,CAAaS,UAAb,EAAN;AACAhB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACH,KAND,CAME,OAAOQ,GAAP,EAAY;AACVd,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACH;AACJ,GAZD;;AAcA,SAAO,EACH,GAAGf,KADA;AAEHgB,IAAAA,WAFG;AAGHX,IAAAA;AAHG,GAAP;AAKH;;GA5CuBP,W","sourcesContent":["import { mutate, query, tx } from \"@onflow/fcl\";\nimport { useEffect, useReducer } from \"react\";\nimport { CREATE_COIN_VAULT } from \"../flow/init-account.tx\";\nimport { GET_BALANCE } from \"../flow/get-balance.script\";\nimport { defaultReducer } from \"../reducer/defaultReducer\";\n\nexport default function useCurrency(user) {\n    const [state, dispatch] = useReducer(defaultReducer, {\n        loading: true,\n        error: false,\n        data: '0.00000000'\n    })\n\n    useEffect(() => {\n        getBalance();\n        //eslint-disable-next-line\n    }, [user?.addr])\n\n    const getBalance = async () => {\n        dispatch({ type: 'PROCESSING'})\n        try {\n            let response = await query({\n                cadence: GET_BALANCE,\n                args: (arg, t) => [arg(user?.addr, t.Address)]\n            })\n            dispatch({ type: 'SUCCESS', payload: response })\n        } catch (err) {\n            dispatch({ type: 'ERROR' })\n        }\n    }\n\n    const createVault = async () => {\n        dispatch({ type: 'PROCESSING' })\n        try {\n            let response = await mutate({\n                cadence: CREATE_COIN_VAULT,\n            })\n            await tx(response).onceSealed()\n            dispatch({ type: 'SUCCESS' })\n        } catch (err) {\n            dispatch({ type: 'ERROR' })\n            console.log(err)\n        }\n    }\n\n    return {\n        ...state,\n        createVault,\n        getBalance\n    }\n}"]},"metadata":{},"sourceType":"module"}