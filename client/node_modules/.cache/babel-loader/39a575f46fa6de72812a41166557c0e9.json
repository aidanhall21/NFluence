{"ast":null,"code":"export const CREATE_AUCTION = `\nimport NFluenceAuction from 0xAUCTION\nimport NFluence from 0xNFLUENCE\nimport FungibleToken from 0x9a0766d93b6608b7\n\ntransaction(nftId: UInt64, startPrice: UFix64) {\n    let ownerCollectionCap: Capability<&NFluence.Collection>\n    let ownerVaultCap: Capability<&{FungibleToken.Receiver}>\n    let storefront: &NFluenceAuction.Storefront\n    let accountCollectionRef: &NFluence.Collection\n\n    prepare(acct: AuthAccount) {\n        self.storefront = acct.borrow<&NFluenceAuction.Storefront>(from: NFluenceAuction.NFluenceAuctionStorefrontStoragePath)\n            ?? panic(\"Missing or mis-typed NFTStorefront Storefront\")\n        self.accountCollectionRef = acct.borrow<&NFluence.Collection>(from: NFluence.CollectionStoragePath)\n            ?? panic(\"Cannot borrow reference to collection\")\n        self.ownerCollectionCap = acct.getCapability<&NFluence.Collection>(NFluence.CollectionPublicPath)\n        self.ownerVaultCap = acct.getCapability<&{FungibleToken.Receiver}>(/public/fusdReceiver)\n    }\n\n    execute {\n        let currentTime = getCurrentBlock().timestamp\n        let minimumBidIncrement = (1 as Int32)\n        let auctionLength = 604800.0\n\n        //let nft <- self.accountCollectionRef.withdraw(withdrawID: nftId)\n        self.storefront.createAuction(token: nftId, minimumBidIncrement: minimumBidIncrement, auctionLength: auctionLength, auctionStartTime: currentTime, startPrice: startPrice, collectionCap: self.ownerCollectionCap, vaultCap: self.ownerVaultCap)\n    }\n}\n`;","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft/client/src/flow/create-auction.tx.js"],"names":["CREATE_AUCTION"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA7BO","sourcesContent":["export const CREATE_AUCTION = `\nimport NFluenceAuction from 0xAUCTION\nimport NFluence from 0xNFLUENCE\nimport FungibleToken from 0x9a0766d93b6608b7\n\ntransaction(nftId: UInt64, startPrice: UFix64) {\n    let ownerCollectionCap: Capability<&NFluence.Collection>\n    let ownerVaultCap: Capability<&{FungibleToken.Receiver}>\n    let storefront: &NFluenceAuction.Storefront\n    let accountCollectionRef: &NFluence.Collection\n\n    prepare(acct: AuthAccount) {\n        self.storefront = acct.borrow<&NFluenceAuction.Storefront>(from: NFluenceAuction.NFluenceAuctionStorefrontStoragePath)\n            ?? panic(\"Missing or mis-typed NFTStorefront Storefront\")\n        self.accountCollectionRef = acct.borrow<&NFluence.Collection>(from: NFluence.CollectionStoragePath)\n            ?? panic(\"Cannot borrow reference to collection\")\n        self.ownerCollectionCap = acct.getCapability<&NFluence.Collection>(NFluence.CollectionPublicPath)\n        self.ownerVaultCap = acct.getCapability<&{FungibleToken.Receiver}>(/public/fusdReceiver)\n    }\n\n    execute {\n        let currentTime = getCurrentBlock().timestamp\n        let minimumBidIncrement = (1 as Int32)\n        let auctionLength = 604800.0\n\n        //let nft <- self.accountCollectionRef.withdraw(withdrawID: nftId)\n        self.storefront.createAuction(token: nftId, minimumBidIncrement: minimumBidIncrement, auctionLength: auctionLength, auctionStartTime: currentTime, startPrice: startPrice, collectionCap: self.ownerCollectionCap, vaultCap: self.ownerVaultCap)\n    }\n}\n`"]},"metadata":{},"sourceType":"module"}