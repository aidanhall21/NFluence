{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { mutate, query, tx } from \"@onflow/fcl\";\nimport { useEffect, useState } from \"react\";\nimport { CHECK_COLLECTION } from '../flow/check-collection.script';\nimport { CREATE_COLLECTION } from \"../flow/create-collection.tx\";\nexport default function useCollection(user) {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [collection, setCollection] = useState(false);\n  useEffect(() => {\n    if (!(user === null || user === void 0 ? void 0 : user.addr)) return;\n\n    const checkCollection = async () => {\n      try {\n        let res = await query({\n          cadence: CHECK_COLLECTION,\n          args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address)]\n        });\n        setCollection(res);\n        console.log(res);\n        setLoading(false);\n      } catch (err) {\n        console.log(err);\n        setLoading(false);\n      }\n    };\n\n    checkCollection(); //eslint-disable-next-line\n  }, []);\n\n  const createCollection = async () => {\n    try {\n      let res = await mutate({\n        cadence: CREATE_COLLECTION,\n        limit: 55\n      });\n      await tx(res).onceSealed();\n      setCollection(true);\n    } catch (err) {\n      console.log(err);\n      setLoading(false);\n    }\n  };\n\n  return {\n    loading,\n    collection,\n    createCollection\n  };\n}\n\n_s(useCollection, \"CpdQmOeNjxT3mncrSAx6rB1ifWM=\");","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft-v3/src/hooks/use-collection.hook.js"],"names":["mutate","query","tx","useEffect","useState","CHECK_COLLECTION","CREATE_COLLECTION","useCollection","user","loading","setLoading","collection","setCollection","addr","checkCollection","res","cadence","args","arg","t","Address","console","log","err","createCollection","limit","onceSealed"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAwBC,EAAxB,QAAkC,aAAlC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AAEA,eAAe,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAAA;;AACxC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,EAACK,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEK,IAAP,CAAH,EAAgB;;AAChB,UAAMC,eAAe,GAAG,YAAY;AAChC,UAAI;AACA,YAAIC,GAAG,GAAG,MAAMd,KAAK,CAAC;AAClBe,UAAAA,OAAO,EAAEX,gBADS;AAElBY,UAAAA,IAAI,EAAE,CAACC,GAAD,EAAMC,CAAN,KAAY,CAACD,GAAG,CAACV,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEK,IAAP,EAAaM,CAAC,CAACC,OAAf,CAAJ;AAFA,SAAD,CAArB;AAIAR,QAAAA,aAAa,CAACG,GAAD,CAAb;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACAL,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OARD,CAQE,OAAOa,GAAP,EAAY;AACVF,QAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACAb,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,KAbD;;AAcAI,IAAAA,eAAe,GAhBH,CAiBZ;AACH,GAlBQ,EAkBN,EAlBM,CAAT;;AAoBA,QAAMU,gBAAgB,GAAG,YAAY;AACjC,QAAI;AACA,UAAIT,GAAG,GAAG,MAAMf,MAAM,CAAC;AACnBgB,QAAAA,OAAO,EAAEV,iBADU;AAEnBmB,QAAAA,KAAK,EAAE;AAFY,OAAD,CAAtB;AAIA,YAAMvB,EAAE,CAACa,GAAD,CAAF,CAAQW,UAAR,EAAN;AACAd,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH,KAPD,CAOE,OAAOW,GAAP,EAAY;AACVF,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACAb,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,GAZD;;AAcA,SAAO;AACHD,IAAAA,OADG;AAEHE,IAAAA,UAFG;AAGHa,IAAAA;AAHG,GAAP;AAKH;;GA3CuBjB,a","sourcesContent":["import { mutate, query, tx } from \"@onflow/fcl\";\nimport { useEffect, useState } from \"react\";\nimport { CHECK_COLLECTION } from '../flow/check-collection.script'\nimport { CREATE_COLLECTION } from \"../flow/create-collection.tx\";\n\nexport default function useCollection(user) {\n    const [loading, setLoading] = useState(true)\n    const [collection, setCollection] = useState(false)\n\n    useEffect(() => {\n        if(!user?.addr) return\n        const checkCollection = async () => {\n            try {\n                let res = await query({\n                    cadence: CHECK_COLLECTION,\n                    args: (arg, t) => [arg(user?.addr, t.Address)]\n                })\n                setCollection(res)\n                console.log(res)\n                setLoading(false)\n            } catch (err) {\n                console.log(err)\n                setLoading(false)\n            }\n        }\n        checkCollection()\n        //eslint-disable-next-line\n    }, [])\n\n    const createCollection = async () => {\n        try {\n            let res = await mutate({\n                cadence: CREATE_COLLECTION,\n                limit: 55\n            })\n            await tx(res).onceSealed()\n            setCollection(true)\n        } catch (err) {\n            console.log(err)\n            setLoading(false)\n        }\n    }\n\n    return {\n        loading,\n        collection,\n        createCollection,\n    }\n}"]},"metadata":{},"sourceType":"module"}