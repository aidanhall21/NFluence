{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { mutate, query, tx } from '@onflow/fcl';\nimport { useEffect, useReducer } from 'react';\nimport { CREATE_FUSD_VAULT } from '../flow/create-fusd-vault.tx';\nimport { GET_FUSD_BALANCE } from '../flow/get-fusd-balance.script';\nimport { defaultReducer } from '../reducer/defaultReducer';\nexport default function useFUSD(user) {\n  _s();\n\n  const [state, dispatch] = useReducer(defaultReducer, {\n    loading: true,\n    error: false,\n    data: null\n  });\n  useEffect(() => {\n    getFUSDBalance(); //eslint-disable-next-line \n  }, []);\n\n  const getFUSDBalance = async () => {\n    dispatch({\n      type: 'PROCESSING'\n    });\n\n    try {\n      let response = await query({\n        cadence: GET_FUSD_BALANCE,\n        args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address)]\n      });\n      dispatch({\n        type: 'SUCCESS',\n        payload: response\n      });\n    } catch (err) {\n      dispatch({\n        type: 'ERROR'\n      });\n      console.log(err);\n    }\n  };\n\n  const createFUSDVault = async () => {\n    dispatch({\n      type: 'PROCESSING'\n    });\n\n    try {\n      let response = await mutate({\n        cadence: CREATE_FUSD_VAULT\n      });\n      await tx(response).onceSealed();\n      dispatch({\n        type: 'SUCCESS'\n      });\n    } catch (err) {\n      dispatch({\n        type: 'ERROR'\n      });\n      console.log(err);\n    }\n  };\n\n  return { ...state,\n    createFUSDVault,\n    getFUSDBalance\n  };\n}\n\n_s(useFUSD, \"8QqmQjtTZ9qbgnff3fC0LgttzHA=\");","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft-v3/src/hooks/use-fusd.hook.js"],"names":["mutate","query","tx","useEffect","useReducer","CREATE_FUSD_VAULT","GET_FUSD_BALANCE","defaultReducer","useFUSD","user","state","dispatch","loading","error","data","getFUSDBalance","type","response","cadence","args","arg","t","addr","Address","payload","err","console","log","createFUSDVault","onceSealed"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAwBC,EAAxB,QAAkC,aAAlC;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,eAAe,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AAAA;;AACpC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,UAAU,CAACG,cAAD,EAAiB;AACnDK,IAAAA,OAAO,EAAE,IAD0C;AAEnDC,IAAAA,KAAK,EAAE,KAF4C;AAGnDC,IAAAA,IAAI,EAAE;AAH6C,GAAjB,CAApC;AAMAX,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,cAAc,GADA,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMA,cAAc,GAAG,YAAY;AACjCJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACF,UAAIC,QAAQ,GAAG,MAAMhB,KAAK,CAAC;AACzBiB,QAAAA,OAAO,EAAEZ,gBADgB;AAEzBa,QAAAA,IAAI,EAAE,CAACC,GAAD,EAAMC,CAAN,KAAY,CAACD,GAAG,CAACX,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEa,IAAP,EAAaD,CAAC,CAACE,OAAf,CAAJ;AAFO,OAAD,CAA1B;AAIAZ,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE,SAAR;AAAmBQ,QAAAA,OAAO,EAAEP;AAA5B,OAAD,CAAR;AACD,KAND,CAME,OAAOQ,GAAP,EAAY;AACZd,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,GAZD;;AAcA,QAAMG,eAAe,GAAG,YAAY;AAClCjB,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACF,UAAIC,QAAQ,GAAG,MAAMjB,MAAM,CAAC;AAC1BkB,QAAAA,OAAO,EAAEb;AADiB,OAAD,CAA3B;AAGA,YAAMH,EAAE,CAACe,QAAD,CAAF,CAAaY,UAAb,EAAN;AACAlB,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD,KAND,CAME,OAAOS,GAAP,EAAY;AACZd,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,GAZD;;AAcA,SAAO,EACL,GAAGf,KADE;AAELkB,IAAAA,eAFK;AAGLb,IAAAA;AAHK,GAAP;AAKD;;GA7CuBP,O","sourcesContent":["import { mutate, query, tx } from '@onflow/fcl';\nimport { useEffect, useReducer } from 'react'\nimport { CREATE_FUSD_VAULT } from '../flow/create-fusd-vault.tx';\nimport { GET_FUSD_BALANCE } from '../flow/get-fusd-balance.script';\nimport { defaultReducer } from '../reducer/defaultReducer'\n\nexport default function useFUSD(user) {\n  const [state, dispatch] = useReducer(defaultReducer, {\n    loading: true,\n    error: false,\n    data: null\n  })\n\n  useEffect(() => {\n    getFUSDBalance();\n    //eslint-disable-next-line \n  }, [])\n\n  const getFUSDBalance = async () => {\n    dispatch({ type: 'PROCESSING' })\n    try {\n      let response = await query({\n        cadence: GET_FUSD_BALANCE,\n        args: (arg, t) => [arg(user?.addr, t.Address)]\n      })\n      dispatch({ type: 'SUCCESS', payload: response })\n    } catch (err) {\n      dispatch({ type: 'ERROR' })\n      console.log(err)\n    }\n  }\n\n  const createFUSDVault = async () => {\n    dispatch({ type: 'PROCESSING' })\n    try {\n      let response = await mutate({\n        cadence: CREATE_FUSD_VAULT\n      })\n      await tx(response).onceSealed()\n      dispatch({ type: 'SUCCESS' })\n    } catch (err) {\n      dispatch({ type: 'ERROR' })\n      console.log(err)\n    }\n  }\n\n  return {\n    ...state,\n    createFUSDVault,\n    getFUSDBalance\n  }\n}\n"]},"metadata":{},"sourceType":"module"}