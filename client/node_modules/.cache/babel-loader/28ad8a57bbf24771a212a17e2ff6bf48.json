{"ast":null,"code":"// Need to updat the event types when going live on testnet\nimport * as fcl from \"@onflow/fcl\";\nexport async function getBidPlacedEvents() {\n  const eventType = \"A.a3c018ee20b2cb65.NSFAuction.BidPlaced\";\n  let end = (await fcl.send([fcl.getBlock(true)]).then(fcl.decode)).height;\n  const events = await fcl.send([fcl.getEventsAtBlockHeightRange(eventType, end - 249, end)]).then(fcl.decode);\n  return events;\n}\nexport async function getMintEvents() {\n  const eventType = \"A.a3c018ee20b2cb65.NSFT.Created\";\n  let end = (await fcl.send([fcl.getBlock(true)]).then(fcl.decode)).height;\n  const events = await fcl.send([fcl.getEventsAtBlockHeightRange(eventType, end - 249, end)]).then(fcl.decode);\n  return events;\n}\nexport async function getAuctionStartedEvents() {\n  const eventType = \"A.a3c018ee20b2cb65.NSFAuction.AuctionCreated\";\n  let end = (await fcl.send([fcl.getBlock(true)]).then(fcl.decode)).height;\n  const events = await fcl.send([fcl.getEventsAtBlockHeightRange(eventType, end - 249, end)]).then(fcl.decode);\n  return events;\n}\nexport async function getBidReceivedEvents() {\n  const eventType = \"A.ff2f131df004d80d.NSFAuction.BidReceived\";\n  let end = (await fcl.send([fcl.getBlock(true)]).then(fcl.decode)).height;\n  const events = await fcl.send([fcl.getEventsAtBlockHeightRange(eventType, end - 249, end)]).then(fcl.decode);\n  return events;\n}\nexport async function getAuctionSettledEvents() {\n  const eventType = \"A.ff2f131df004d80d.NSFAuction.Settled\";\n  let end = (await fcl.send([fcl.getBlock(true)]).then(fcl.decode)).height;\n  const events = await fcl.send([fcl.getEventsAtBlockHeightRange(eventType, end - 249, end)]).then(fcl.decode);\n  return events;\n}\nexport async function getBuyerTokenRewardEvent() {\n  const eventType = \"A.ff2f131df004d80d.NSFAuction.BuyerTokenReward\";\n  let end = (await fcl.send([fcl.getBlock(true)]).then(fcl.decode)).height;\n  const events = await fcl.send([fcl.getEventsAtBlockHeightRange(eventType, end - 249, end)]).then(fcl.decode);\n  return events;\n}\nexport async function getSellerTokenRewardEvent() {\n  const eventType = \"A.ff2f131df004d80d.NSFAuction.SellerTokenReward\";\n  let end = (await fcl.send([fcl.getBlock(true)]).then(fcl.decode)).height;\n  const events = await fcl.send([fcl.getEventsAtBlockHeightRange(eventType, end - 249, end)]).then(fcl.decode);\n  return events;\n}\nexport async function getUtilityCoinDepositEvent() {\n  const eventType = \"A.ff2f131df004d80d.UtilityCoin.TokensDeposited\";\n  let end = (await fcl.send([fcl.getBlock(true)]).then(fcl.decode)).height;\n  const events = await fcl.send([fcl.getEventsAtBlockHeightRange(eventType, end - 249, end)]).then(fcl.decode);\n  const eventsMod = {\n    events\n  };\n  const eventsArray = eventsMod['events']; //console.log(eventsMod['events']);\n\n  eventsArray.map(event => {\n    event['data']['user'] = event['data']['to'];\n    delete event['data']['to'];\n    return event;\n  });\n  return eventsArray;\n}\nexport async function getAllEvents() {\n  const bidsPlaced = await getBidPlacedEvents();\n  const auctionStarted = await getAuctionStartedEvents(); //const mints = await getMintEvents();\n  //const bidsReceived = await getBidReceivedEvents();\n\n  const auctionSettled = await getAuctionSettledEvents();\n  const allEvents = [...bidsPlaced, ...auctionStarted, ...auctionSettled];\n  return allEvents;\n}\nexport async function getAllNotifications() {\n  const bidsReceived = await getBidReceivedEvents();\n  const auctionSettled = await getAuctionSettledEvents();\n  const buyerTokenReward = await getBuyerTokenRewardEvent();\n  const sellerTokenReward = await getSellerTokenRewardEvent(); //const coinDeposit = await getUtilityCoinDepositEvent();\n\n  const allNotifications = [...buyerTokenReward, ...sellerTokenReward, ...bidsReceived, ...auctionSettled];\n  return allNotifications;\n}","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft/client/src/flow/query-event.script.script.js"],"names":["fcl","getBidPlacedEvents","eventType","end","send","getBlock","then","decode","height","events","getEventsAtBlockHeightRange","getMintEvents","getAuctionStartedEvents","getBidReceivedEvents","getAuctionSettledEvents","getBuyerTokenRewardEvent","getSellerTokenRewardEvent","getUtilityCoinDepositEvent","eventsMod","eventsArray","map","event","getAllEvents","bidsPlaced","auctionStarted","auctionSettled","allEvents","getAllNotifications","bidsReceived","buyerTokenReward","sellerTokenReward","allNotifications"],"mappings":"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","sourcesContent":["// Need to updat the event types when going live on testnet\n\nimport * as fcl from \"@onflow/fcl\";\n\nexport async function getBidPlacedEvents() {\n  const eventType = \"A.a3c018ee20b2cb65.NSFAuction.BidPlaced\";\n\n  let end = (await fcl.send([fcl.getBlock(true)]).then(fcl.decode)).height;\n\n  const events = await fcl\n    .send([fcl.getEventsAtBlockHeightRange(eventType, end - 249, end)])\n    .then(fcl.decode);\n  return events;\n}\n\nexport async function getMintEvents() {\n  const eventType = \"A.a3c018ee20b2cb65.NSFT.Created\";\n\n  let end = (await fcl.send([fcl.getBlock(true)]).then(fcl.decode)).height;\n\n  const events = await fcl\n    .send([fcl.getEventsAtBlockHeightRange(eventType, end - 249, end)])\n    .then(fcl.decode);\n  return events;\n}\n\nexport async function getAuctionStartedEvents() {\n  const eventType = \"A.a3c018ee20b2cb65.NSFAuction.AuctionCreated\";\n\n  let end = (await fcl.send([fcl.getBlock(true)]).then(fcl.decode)).height;\n\n  const events = await fcl\n    .send([fcl.getEventsAtBlockHeightRange(eventType, end - 249, end)])\n    .then(fcl.decode);\n  return events;\n}\n\nexport async function getBidReceivedEvents() {\n  const eventType = \"A.ff2f131df004d80d.NSFAuction.BidReceived\";\n\n  let end = (await fcl.send([fcl.getBlock(true)]).then(fcl.decode)).height;\n\n  const events = await fcl\n    .send([fcl.getEventsAtBlockHeightRange(eventType, end - 249, end)])\n    .then(fcl.decode);\n  return events;\n}\n\nexport async function getAuctionSettledEvents() {\n  const eventType = \"A.ff2f131df004d80d.NSFAuction.Settled\";\n\n  let end = (await fcl.send([fcl.getBlock(true)]).then(fcl.decode)).height;\n\n  const events = await fcl\n    .send([fcl.getEventsAtBlockHeightRange(eventType, end - 249, end)])\n    .then(fcl.decode);\n  return events;\n}\n\nexport async function getBuyerTokenRewardEvent() {\n  const eventType = \"A.ff2f131df004d80d.NSFAuction.BuyerTokenReward\";\n\n  let end = (await fcl.send([fcl.getBlock(true)]).then(fcl.decode)).height;\n\n  const events = await fcl\n    .send([fcl.getEventsAtBlockHeightRange(eventType, end - 249, end)])\n    .then(fcl.decode);\n  return events;\n}\n\nexport async function getSellerTokenRewardEvent() {\n  const eventType = \"A.ff2f131df004d80d.NSFAuction.SellerTokenReward\";\n\n  let end = (await fcl.send([fcl.getBlock(true)]).then(fcl.decode)).height;\n\n  const events = await fcl\n      .send([fcl.getEventsAtBlockHeightRange(eventType, end - 249, end)])\n      .then(fcl.decode);\n  return events;\n}\n\nexport async function getUtilityCoinDepositEvent() {\n  const eventType = \"A.ff2f131df004d80d.UtilityCoin.TokensDeposited\";\n\n  let end = (await fcl.send([fcl.getBlock(true)]).then(fcl.decode)).height;\n\n  const events = await fcl\n      .send([fcl.getEventsAtBlockHeightRange(eventType, end - 249, end)])\n      .then(fcl.decode);\n  const eventsMod = { events }\n  const eventsArray = eventsMod['events']\n  //console.log(eventsMod['events']);\n\n  eventsArray.map(event => {\n    event['data']['user'] = event['data']['to'];\n    delete event['data']['to']\n    return event\n  })\n\n  return eventsArray;\n}\n\nexport async function getAllEvents() {\n  const bidsPlaced = await getBidPlacedEvents();\n  const auctionStarted = await getAuctionStartedEvents();\n  //const mints = await getMintEvents();\n  //const bidsReceived = await getBidReceivedEvents();\n  const auctionSettled = await getAuctionSettledEvents();\n\n  const allEvents = [\n    ...bidsPlaced,\n    ...auctionStarted,\n    ...auctionSettled,\n  ];\n\n  return allEvents;\n}\n\nexport async function getAllNotifications() {\n  const bidsReceived = await getBidReceivedEvents();\n  const auctionSettled = await getAuctionSettledEvents();\n  const buyerTokenReward = await getBuyerTokenRewardEvent();\n  const sellerTokenReward = await getSellerTokenRewardEvent();\n  //const coinDeposit = await getUtilityCoinDepositEvent();\n\n  const allNotifications = [\n    ...buyerTokenReward,\n    ...sellerTokenReward,\n    ...bidsReceived,\n    ...auctionSettled,\n  ];\n\n  return allNotifications;\n}\n"]},"metadata":{},"sourceType":"module"}