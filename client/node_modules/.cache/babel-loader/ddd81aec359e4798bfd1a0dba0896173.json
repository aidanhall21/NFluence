{"ast":null,"code":"import CryptoJS from \"crypto-js\";\n\nconst decrypt = data => {\n  return CryptoJS.enc.Base64.parse(data).toString(CryptoJS.enc.Utf8);\n};\n\nexport function makeGatewayURL(ipfsURI) {\n  return ipfsURI.replace(/^ipfs:\\/\\//, \"https://dweb.link/ipfs/\");\n}\nexport async function fetchIPFSJSON(ipfsURI) {\n  const url = makeGatewayURL(ipfsURI);\n  console.log(\"url\", url);\n  const resp = await fetch(url);\n  return resp.json();\n}\nexport const createTokenLink = async item => {\n  console.log(\"item\", item);\n  if (!item.cid) return {};\n  if (item.cid === \"\") return {};\n  let decodedHash;\n\n  try {\n    decodedHash = decrypt(item.cid);\n  } catch {\n    decodedHash = item.cid;\n  }\n\n  const renderedFile = await fetchIPFSJSON(decodedHash);\n  console.log(\"rendered file1\", renderedFile);\n  renderedFile.properties.file = makeGatewayURL(renderedFile.properties.file);\n  console.log(\"rendered file\", renderedFile);\n  return renderedFile;\n};\nexport const formatAmountInput = x => {\n  return x.toString() + \".0\";\n};","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft/client/src/mocks/functions.js"],"names":["CryptoJS","decrypt","data","enc","Base64","parse","toString","Utf8","makeGatewayURL","ipfsURI","replace","fetchIPFSJSON","url","console","log","resp","fetch","json","createTokenLink","item","cid","decodedHash","renderedFile","properties","file","formatAmountInput","x"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;;AAEA,MAAMC,OAAO,GAAIC,IAAD,IAAU;AACxB,SAAOF,QAAQ,CAACG,GAAT,CAAaC,MAAb,CAAoBC,KAApB,CAA0BH,IAA1B,EAAgCI,QAAhC,CAAyCN,QAAQ,CAACG,GAAT,CAAaI,IAAtD,CAAP;AACD,CAFD;;AAIA,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AACpC,SAAOA,OAAO,CAACC,OAAR,CAAgB,YAAhB,EAA8B,yBAA9B,CAAP;AACD;AAEH,OAAO,eAAeC,aAAf,CAA6BF,OAA7B,EAAsC;AACzC,QAAMG,GAAG,GAAGJ,cAAc,CAACC,OAAD,CAA1B;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB;AACA,QAAMG,IAAI,GAAG,MAAMC,KAAK,CAACJ,GAAD,CAAxB;AAEA,SAAOG,IAAI,CAACE,IAAL,EAAP;AACD;AAEH,OAAO,MAAMC,eAAe,GAAG,MAAOC,IAAP,IAAgB;AAC3CN,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBK,IAApB;AACA,MAAI,CAACA,IAAI,CAACC,GAAV,EAAe,OAAO,EAAP;AACf,MAAID,IAAI,CAACC,GAAL,KAAa,EAAjB,EAAqB,OAAO,EAAP;AACrB,MAAIC,WAAJ;;AACA,MAAI;AACFA,IAAAA,WAAW,GAAGpB,OAAO,CAACkB,IAAI,CAACC,GAAN,CAArB;AACD,GAFD,CAEE,MAAM;AACNC,IAAAA,WAAW,GAAGF,IAAI,CAACC,GAAnB;AACD;;AACD,QAAME,YAAY,GAAG,MAAMX,aAAa,CAACU,WAAD,CAAxC;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BQ,YAA9B;AACAA,EAAAA,YAAY,CAACC,UAAb,CAAwBC,IAAxB,GAA+BhB,cAAc,CAACc,YAAY,CAACC,UAAb,CAAwBC,IAAzB,CAA7C;AACAX,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BQ,YAA7B;AACA,SAAOA,YAAP;AACD,CAfI;AAiBP,OAAO,MAAMG,iBAAiB,GAAIC,CAAD,IAAO;AACtC,SAAOA,CAAC,CAACpB,QAAF,KAAe,IAAtB;AACD,CAFM","sourcesContent":["import CryptoJS from \"crypto-js\";\n\nconst decrypt = (data) => {\n  return CryptoJS.enc.Base64.parse(data).toString(CryptoJS.enc.Utf8);\n};\n\nexport function makeGatewayURL(ipfsURI) {\n    return ipfsURI.replace(/^ipfs:\\/\\//, \"https://dweb.link/ipfs/\");\n  }\n  \nexport async function fetchIPFSJSON(ipfsURI) {\n    const url = makeGatewayURL(ipfsURI);\n    console.log(\"url\", url)\n    const resp = await fetch(url);\n\n    return resp.json();\n  }\n\nexport const createTokenLink = async (item) => {\n    console.log(\"item\", item)\n    if (!item.cid) return {}\n    if (item.cid === \"\") return {};\n    let decodedHash;\n    try {\n      decodedHash = decrypt(item.cid)\n    } catch {\n      decodedHash = item.cid\n    }\n    const renderedFile = await fetchIPFSJSON(decodedHash);\n    console.log(\"rendered file1\", renderedFile)\n    renderedFile.properties.file = makeGatewayURL(renderedFile.properties.file)\n    console.log(\"rendered file\", renderedFile)\n    return renderedFile;\n  };\n\nexport const formatAmountInput = (x) => {\n  return x.toString() + \".0\";\n}\n\n"]},"metadata":{},"sourceType":"module"}