{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer } from \"react\";\nimport { userNsftReducer } from \"../reducer/userNsftReducer\";\nimport { mutate, query, tx } from '@onflow/fcl';\nimport { MINT_NSFT } from \"../flow/mint-nsft.tx\";\nimport { authorizationFunction } from \"../services/authorization-function\";\nimport { GET_TOKEN_DATA } from \"../flow/get-token-data.script\";\nimport { CREATE_AUCTION } from \"../flow/create-auction.tx\";\nimport { GET_AUCTION_IDS } from \"../flow/get-auction-ids.script\";\nimport { GET_AUCTION_TOKEN_DATA } from \"../flow/get-auction-token-data.scripts\";\nimport { GET_SINGLE_AUCTION_DATA } from \"../flow/get-single-auction-data.script\";\nexport default function useUserNsfts(user) {\n  _s();\n\n  const [state, dispatch] = useReducer(userNsftReducer, {\n    loading: false,\n    error: false,\n    minted_data: [],\n    auction_data: [],\n    txStatus: {}\n  });\n  useEffect(() => {\n    if (!(user === null || user === void 0 ? void 0 : user.addr)) return;\n\n    const fetchUserMintedNsfts = async () => {\n      dispatch({\n        type: 'PROCESSING'\n      });\n\n      try {\n        let res = await query({\n          cadence: GET_TOKEN_DATA,\n          args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address)]\n        });\n        let minted_nsfts = res.filter(token => token.creatorAddress === (user === null || user === void 0 ? void 0 : user.addr));\n        dispatch({\n          type: 'MINTED_SUCCESS',\n          payload: minted_nsfts\n        });\n      } catch (err) {\n        console.log(err);\n        dispatch({\n          type: 'ERROR'\n        });\n      }\n    };\n\n    fetchUserMintedNsfts(); //eslint-disable-next-line\n  }, [user]);\n  useEffect(() => {\n    if (!(user === null || user === void 0 ? void 0 : user.addr)) return;\n\n    const fetchUserLiveAuctions = async () => {\n      dispatch({\n        type: 'PROCESSING'\n      });\n\n      try {\n        let res = await query({\n          cadence: GET_AUCTION_IDS,\n          args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address)]\n        });\n        console.log(res);\n        let data = res.map(async id => {\n          let token_data = await query({\n            cadence: GET_AUCTION_TOKEN_DATA,\n            args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address), arg(id, t.UInt64)]\n          });\n          console.log(token_data);\n          let auction_data = await query({\n            cadence: GET_SINGLE_AUCTION_DATA,\n            args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address), arg(id, t.UInt64)]\n          });\n          console.log(auction_data);\n          return { ...token_data,\n            ...auction_data\n          };\n        });\n        console.log(data);\n        dispatch({\n          type: 'AUCTION_SUCCESS',\n          payload: data\n        });\n      } catch (err) {\n        dispatch({\n          type: 'ERROR'\n        });\n      }\n    };\n\n    fetchUserLiveAuctions();\n  }, [user]);\n\n  const addToAuction = async (nftid, price) => {\n    dispatch({\n      type: 'PROCESSING'\n    });\n\n    try {\n      let res = await mutate({\n        cadence: CREATE_AUCTION,\n        args: (arg, t) => [arg(nftid, t.UInt64), arg(price, t.UFix64)],\n        limit: 500\n      });\n      let txStatus = await tx(res).onceSealed();\n      dispatch({\n        type: 'TX_SUCCESS',\n        payload: txStatus\n      });\n      return txStatus;\n    } catch (err) {\n      console.log(err);\n      dispatch({\n        type: 'ERROR'\n      });\n    }\n  };\n\n  const mintNsft = async (cid, fileType, title, description, editionSize) => {\n    dispatch({\n      type: 'PROCESSING'\n    });\n\n    try {\n      let res = await mutate({\n        cadence: MINT_NSFT,\n        args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address), arg(cid, t.String), arg(fileType, t.UInt8), arg(title, t.String), arg(description, t.String), arg(editionSize, t.UInt16)],\n        limit: 500,\n        authz: authorizationFunction\n      }); //addTx(res)\n\n      let txStatus = await tx(res).onceSealed();\n      dispatch({\n        type: 'TX_SUCCESS',\n        payload: txStatus\n      });\n      return txStatus;\n    } catch (err) {\n      console.log(err);\n      dispatch({\n        type: 'ERROR'\n      });\n    }\n  };\n\n  return { ...state,\n    mintNsft,\n    addToAuction\n  };\n}\n\n_s(useUserNsfts, \"+ja9Ar6u31Zmb/p6KQEC1GAc8RI=\");","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft/client/src/hooks/use-user-nsfts.hook.js"],"names":["useEffect","useReducer","userNsftReducer","mutate","query","tx","MINT_NSFT","authorizationFunction","GET_TOKEN_DATA","CREATE_AUCTION","GET_AUCTION_IDS","GET_AUCTION_TOKEN_DATA","GET_SINGLE_AUCTION_DATA","useUserNsfts","user","state","dispatch","loading","error","minted_data","auction_data","txStatus","addr","fetchUserMintedNsfts","type","res","cadence","args","arg","t","Address","minted_nsfts","filter","token","creatorAddress","payload","err","console","log","fetchUserLiveAuctions","data","map","id","token_data","UInt64","addToAuction","nftid","price","UFix64","limit","onceSealed","mintNsft","cid","fileType","title","description","editionSize","String","UInt8","UInt16","authz"],"mappings":"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","sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport { userNsftReducer } from \"../reducer/userNsftReducer\";\nimport { mutate, query, tx } from '@onflow/fcl';\nimport { MINT_NSFT } from \"../flow/mint-nsft.tx\";\nimport { authorizationFunction } from \"../services/authorization-function\";\nimport { GET_TOKEN_DATA } from \"../flow/get-token-data.script\";\nimport { CREATE_AUCTION } from \"../flow/create-auction.tx\";\nimport { GET_AUCTION_IDS } from \"../flow/get-auction-ids.script\";\nimport { GET_AUCTION_TOKEN_DATA } from \"../flow/get-auction-token-data.scripts\";\nimport { GET_SINGLE_AUCTION_DATA } from \"../flow/get-single-auction-data.script\";\n\nexport default function useUserNsfts(user) {\n    const [state, dispatch] = useReducer(userNsftReducer, {\n        loading: false,\n        error: false,\n        minted_data: [],\n        auction_data: [],\n        txStatus: {}\n    })\n\n    useEffect(() => {\n        if(!user?.addr) return\n        const fetchUserMintedNsfts = async () => {\n            dispatch({ type: 'PROCESSING' })\n            try {\n                let res = await query({\n                    cadence: GET_TOKEN_DATA,\n                    args: (arg, t) => [arg(user?.addr, t.Address)]\n                })\n                let minted_nsfts = res.filter(token => token.creatorAddress === user?.addr)\n                dispatch({ type: 'MINTED_SUCCESS', payload: minted_nsfts })\n            } catch (err) {\n                console.log(err)\n                dispatch({ type: 'ERROR' })\n            }\n        }\n        fetchUserMintedNsfts()\n        //eslint-disable-next-line\n    }, [user])\n\n    useEffect(() => {\n        if(!user?.addr) return\n        const fetchUserLiveAuctions = async () => {\n            dispatch({ type: 'PROCESSING' })\n            try {\n                let res = await query({\n                    cadence: GET_AUCTION_IDS,\n                    args: (arg, t) => [arg(user?.addr, t.Address)]\n                })\n                console.log(res)\n                let data = res.map(async (id) => {\n                    let token_data = await query({\n                        cadence: GET_AUCTION_TOKEN_DATA,\n                        args: (arg, t) => [arg(user?.addr, t.Address), arg(id, t.UInt64)]\n                    })\n                    console.log(token_data)\n                    let auction_data = await query({\n                        cadence: GET_SINGLE_AUCTION_DATA,\n                        args: (arg, t) => [arg(user?.addr, t.Address), arg(id, t.UInt64)]\n                    })\n                    console.log(auction_data)\n                    return {...token_data, ...auction_data}\n                })\n                console.log(data)\n                dispatch({ type: 'AUCTION_SUCCESS', payload: data })\n            } catch(err) {\n                dispatch({ type: 'ERROR' })\n            }\n        }\n        fetchUserLiveAuctions()\n    }, [user])\n\n    const addToAuction = async (nftid, price) => {\n        dispatch({ type: 'PROCESSING' })\n        try {\n            let res = await mutate({\n                cadence: CREATE_AUCTION,\n                args: (arg, t) => [\n                    arg(nftid, t.UInt64),\n                    arg(price, t.UFix64)\n                ],\n                limit: 500\n            })\n            let txStatus = await tx(res).onceSealed()\n            dispatch({ type: 'TX_SUCCESS', payload: txStatus })\n            return txStatus\n        } catch(err) {\n            console.log(err)\n            dispatch({ type: 'ERROR' })\n        }\n    }\n\n    const mintNsft = async (cid, fileType, title, description, editionSize) => {\n        dispatch({ type: 'PROCESSING' })\n        try {\n            let res = await mutate({\n                cadence: MINT_NSFT,\n                args: (arg, t) => [\n                    arg(user?.addr, t.Address),\n                    arg(cid, t.String),\n                    arg(fileType, t.UInt8),\n                    arg(title, t.String),\n                    arg(description, t.String),\n                    arg(editionSize, t.UInt16),\n                  ],\n                  limit: 500,\n                  authz: authorizationFunction\n            })\n            //addTx(res)\n            let txStatus = await tx(res).onceSealed()\n            dispatch({ type: 'TX_SUCCESS', payload: txStatus })\n            return txStatus\n        } catch(err) {\n            console.log(err)\n            dispatch({ type: 'ERROR' })\n        }\n    }\n\n    return {\n        ...state,\n        mintNsft,\n        addToAuction\n    }\n}"]},"metadata":{},"sourceType":"module"}