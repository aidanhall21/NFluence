{"ast":null,"code":"export const BID_ON_AUCTION = `\nimport NSFT from 0xNSFT\nimport NSFAuction from 0xNSFAUCTION\nimport FungibleToken from 0x9a0766d93b6608b7\nimport UtilityCoin from 0xUTILITYCOIN\n\ntransaction(listingResourceID: UInt64, storefrontAddress: Address, bidAmount: UFix64) {\n    let paymentVault: @FungibleToken.Vault\n    let storefront: &NSFAuction.Storefront{NSFAuction.StorefrontPublic}\n    let listing: &NSFAuction.AuctionItem{NSFAuction.AuctionPublic}\n    let vaultCap: Capability<&{FungibleToken.Receiver}>\n    let collectionCap: Capability<&{NSFT.NSFTCollectionPublic}>\n\n    prepare(acct: AuthAccount) {\n        self.storefront = getAccount(storefrontAddress)\n            .getCapability<&NSFAuction.Storefront{NSFAuction.StorefrontPublic}>(\n                NSFAuction.StorefrontPublicPath\n            )\n            .borrow()\n            ?? panic(\"Could not borrow Storefront from provided address\")\n        self.listing = self.storefront.borrowListing(listingResourceID: listingResourceID)\n            ?? panic(\"No offer with that ID in Storefront\")\n        let vaultRef = acct.borrow<&UtilityCoin.Vault>(from: /storage/utilityCoinVault)\n            ?? panic(\"Could not borrow reference to the owner's Vault!\")\n        self.paymentVault <- vaultRef.withdraw(amount: bidAmount)\n        self.vaultCap = acct.getCapability<&{FungibleToken.Receiver}>(/public/utilityCoinReceiver)\n        self.collectionCap = acct.getCapability<&NSFT.Collection{NSFT.NSFTCollectionPublic}>(NSFT.CollectionPublicPath)\n    }\n\n    execute {\n        self.listing.placeBid(bidTokens: <-self.paymentVault, vaultCap: self.vaultCap, collectionCap: self.collectionCap)\n    }\n}\n`;","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft/client/src/flow/bid-auction.tx.js"],"names":["BID_ON_AUCTION"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjCO","sourcesContent":["export const BID_ON_AUCTION = `\nimport NSFT from 0xNSFT\nimport NSFAuction from 0xNSFAUCTION\nimport FungibleToken from 0x9a0766d93b6608b7\nimport UtilityCoin from 0xUTILITYCOIN\n\ntransaction(listingResourceID: UInt64, storefrontAddress: Address, bidAmount: UFix64) {\n    let paymentVault: @FungibleToken.Vault\n    let storefront: &NSFAuction.Storefront{NSFAuction.StorefrontPublic}\n    let listing: &NSFAuction.AuctionItem{NSFAuction.AuctionPublic}\n    let vaultCap: Capability<&{FungibleToken.Receiver}>\n    let collectionCap: Capability<&{NSFT.NSFTCollectionPublic}>\n\n    prepare(acct: AuthAccount) {\n        self.storefront = getAccount(storefrontAddress)\n            .getCapability<&NSFAuction.Storefront{NSFAuction.StorefrontPublic}>(\n                NSFAuction.StorefrontPublicPath\n            )\n            .borrow()\n            ?? panic(\"Could not borrow Storefront from provided address\")\n        self.listing = self.storefront.borrowListing(listingResourceID: listingResourceID)\n            ?? panic(\"No offer with that ID in Storefront\")\n        let vaultRef = acct.borrow<&UtilityCoin.Vault>(from: /storage/utilityCoinVault)\n            ?? panic(\"Could not borrow reference to the owner's Vault!\")\n        self.paymentVault <- vaultRef.withdraw(amount: bidAmount)\n        self.vaultCap = acct.getCapability<&{FungibleToken.Receiver}>(/public/utilityCoinReceiver)\n        self.collectionCap = acct.getCapability<&NSFT.Collection{NSFT.NSFTCollectionPublic}>(NSFT.CollectionPublicPath)\n    }\n\n    execute {\n        self.listing.placeBid(bidTokens: <-self.paymentVault, vaultCap: self.vaultCap, collectionCap: self.collectionCap)\n    }\n}\n`"]},"metadata":{},"sourceType":"module"}