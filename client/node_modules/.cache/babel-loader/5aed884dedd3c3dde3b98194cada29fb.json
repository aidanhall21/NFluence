{"ast":null,"code":"import faker from \"faker\";\nimport Please from \"pleasejs\";\nimport { COMMON, DAPPY_RARITY_DISTRIBUTION, DEFAULT_DAPPIES, RARE, ULTRARARE } from \"../config/dappies.config\";\nimport { prefixHex, createRandomNumber } from \"./utils\";\nexport const parseDNA = dna => dna.split(\".\");\nexport const calculatePrice = dna => {\n  if (dna >= 31) {\n    return 21.0;\n  } else if (dna >= 25) {\n    return 14.0;\n  } else {\n    return 7.0;\n  }\n};\nexport const createRandomHexColor = () => {\n  var letters = '0123456789ABCDEF';\n  var color = '';\n\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n\n  return color;\n};\nexport const generateStripeColors = dna => {\n  const stripes = dna.split(\".\");\n  stripes.pop();\n  let colors = [];\n\n  for (let index = 0; index < stripes.length; index++) {\n    const color = prefixHex(stripes[index]);\n    colors.push(color);\n  }\n\n  return colors;\n};\nexport const generateEyeColor = dna => {\n  const dnaArray = dna.split(\".\");\n  const index = dnaArray[dnaArray.length - 1];\n  return prefixHex(dnaArray[index]) || prefixHex(index);\n};\nexport const createRandomDNA = (rarity = 3, customEyes) => {\n  let dna = \"\";\n\n  for (let index = 0; index < rarity; index++) {\n    dna += createRandomHexColor() + \".\";\n  }\n\n  if (customEyes) {\n    dna += createRandomHexColor();\n  } else {\n    dna += createRandomNumber(rarity);\n  }\n\n  return dna;\n};\nexport const createRandomDappies = (number = 1, theme, customRarity) => {\n  let dappies = [];\n\n  for (let i = 0; i < number; i++) {\n    let rarity = customRarity || DAPPY_RARITY_DISTRIBUTION[createRandomNumber(DAPPY_RARITY_DISTRIBUTION.length)];\n    let newborn = {\n      name: `${faker.name.firstName()} Dappy`,\n      dna: theme ? createThemedDNA(rarity, theme) : createRandomDNA(rarity),\n      id: i + 1\n    };\n    dappies.push(newborn);\n  }\n\n  return dappies;\n}; // Themes: mono, complement, split, double, ana, tri\n\nexport const createThemedDNA = (rarity, theme) => {\n  let startingColor = Please.make_color({\n    format: \"hsv\",\n    full_random: false\n  });\n  let scheme;\n\n  switch (rarity) {\n    case COMMON.stripes:\n      scheme = Please.make_scheme(...startingColor, {\n        scheme_type: \"split\"\n      });\n      break;\n\n    case RARE.stripes:\n      scheme = Please.make_scheme(...startingColor, {\n        scheme_type: \"double\"\n      });\n      break;\n\n    case ULTRARARE.stripes:\n      scheme = Please.make_scheme(...startingColor, {\n        scheme_type: \"mono\"\n      });\n      break;\n\n    default:\n      scheme = Please.make_scheme(...startingColor, {\n        scheme_type: \"mono\"\n      });\n      break;\n  }\n\n  let dna = \"\";\n\n  for (let index = 0; index < rarity; index++) {\n    let colorToAdd = scheme[index] ? scheme[index] : scheme[createRandomNumber(scheme.length)];\n    dna += (colorToAdd === null || colorToAdd === void 0 ? void 0 : colorToAdd.replace(\"#\", \"\")) + \".\";\n  }\n\n  dna += createRandomNumber(rarity);\n  return dna;\n};\nexport const generateDappies = (dappies = DEFAULT_DAPPIES) => {\n  const generatedDappies = dappies.map(d => {\n    var _d$dna;\n\n    return {\n      templateID: d === null || d === void 0 ? void 0 : d.templateID,\n      dna: d === null || d === void 0 ? void 0 : d.dna,\n      name: d === null || d === void 0 ? void 0 : d.name,\n      price: calculatePrice(d === null || d === void 0 ? void 0 : (_d$dna = d.dna) === null || _d$dna === void 0 ? void 0 : _d$dna.length)\n    };\n  });\n  return generatedDappies;\n};\nexport const RANDOM_DAPPIES = createRandomDappies(12);","map":{"version":3,"sources":["/Users/aidanhall/Desktop/crypto-dappy/src/utils/dappies.utils.js"],"names":["faker","Please","COMMON","DAPPY_RARITY_DISTRIBUTION","DEFAULT_DAPPIES","RARE","ULTRARARE","prefixHex","createRandomNumber","parseDNA","dna","split","calculatePrice","createRandomHexColor","letters","color","i","Math","floor","random","generateStripeColors","stripes","pop","colors","index","length","push","generateEyeColor","dnaArray","createRandomDNA","rarity","customEyes","createRandomDappies","number","theme","customRarity","dappies","newborn","name","firstName","createThemedDNA","id","startingColor","make_color","format","full_random","scheme","make_scheme","scheme_type","colorToAdd","replace","generateDappies","generatedDappies","map","d","templateID","price","RANDOM_DAPPIES"],"mappings":"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","sourcesContent":["import faker from \"faker\"\nimport Please from \"pleasejs\"\nimport { COMMON, DAPPY_RARITY_DISTRIBUTION, DEFAULT_DAPPIES, RARE, ULTRARARE } from \"../config/dappies.config\";\nimport { prefixHex, createRandomNumber } from \"./utils\"\n\nexport const parseDNA = (dna) => dna.split(\".\")\n\nexport const calculatePrice = (dna) => {\n  if (dna >= 31) {\n    return 21.0\n  } else if (dna >= 25) {\n    return 14.0\n  } else {\n    return 7.0\n  }\n}\n\nexport const createRandomHexColor = () => {\n  var letters = '0123456789ABCDEF';\n  var color = '';\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nexport const generateStripeColors = (dna) => {\n  const stripes = dna.split(\".\")\n  stripes.pop()\n  let colors = []\n  for (let index = 0; index < stripes.length; index++) {\n    const color = prefixHex(stripes[index]);\n    colors.push(color)\n  }\n  return colors\n}\n\nexport const generateEyeColor = (dna) => {\n  const dnaArray = dna.split(\".\")\n  const index = dnaArray[dnaArray.length - 1]\n  return prefixHex(dnaArray[index]) || prefixHex(index)\n}\n\nexport const createRandomDNA = (rarity = 3, customEyes) => {\n  let dna = \"\"\n  for (let index = 0; index < rarity; index++) {\n    dna += createRandomHexColor() + \".\"\n  }\n  if (customEyes) {\n    dna += createRandomHexColor()\n  } else {\n    dna += createRandomNumber(rarity)\n  }\n  return dna\n}\n\nexport const createRandomDappies = (number = 1, theme, customRarity) => {\n  let dappies = [];\n\n  for (let i = 0; i < number; i++) {\n    let rarity = customRarity || DAPPY_RARITY_DISTRIBUTION[createRandomNumber(DAPPY_RARITY_DISTRIBUTION.length)]\n    let newborn = {\n      name: `${faker.name.firstName()} Dappy`,\n      dna: theme ? createThemedDNA(rarity, theme) : createRandomDNA(rarity),\n      id: i + 1\n    }\n    dappies.push(newborn)\n  }\n  return dappies;\n}\n\n// Themes: mono, complement, split, double, ana, tri\nexport const createThemedDNA = (rarity, theme) => {\n  let startingColor = Please.make_color({ format: \"hsv\", full_random: false })\n  let scheme;\n\n  switch (rarity) {\n    case COMMON.stripes:\n      scheme = Please.make_scheme(...startingColor, { scheme_type: \"split\" })\n      break;\n    case RARE.stripes:\n      scheme = Please.make_scheme(...startingColor, { scheme_type: \"double\" })\n      break;\n    case ULTRARARE.stripes:\n      scheme = Please.make_scheme(...startingColor, { scheme_type: \"mono\" })\n      break;\n    default:\n      scheme = Please.make_scheme(...startingColor, { scheme_type: \"mono\" })\n      break;\n  }\n\n  let dna = \"\"\n\n  for (let index = 0; index < rarity; index++) {\n    let colorToAdd = scheme[index] ? scheme[index] : scheme[createRandomNumber(scheme.length)]\n    dna += colorToAdd?.replace(\"#\", \"\") + \".\"\n  }\n\n  dna += createRandomNumber(rarity)\n\n  return dna\n}\n\nexport const generateDappies = (dappies = DEFAULT_DAPPIES) => {\n  const generatedDappies = dappies.map(d => {\n    return {\n      templateID: d?.templateID,\n      dna: d?.dna,\n      name: d?.name,\n      price: calculatePrice(d?.dna?.length)\n    }\n  })\n  return generatedDappies\n}\n\nexport const RANDOM_DAPPIES = createRandomDappies(12)"]},"metadata":{},"sourceType":"module"}