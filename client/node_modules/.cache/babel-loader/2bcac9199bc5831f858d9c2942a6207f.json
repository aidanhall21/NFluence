{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer } from \"react\";\nimport { userNsftReducer } from \"../reducer/userNsftReducer\";\nimport { mutate, query, tx } from '@onflow/fcl';\nimport { useTxs } from \"../providers/TxProvider\";\nimport { LIST_USER_OWNED_NFTS } from \"../flow/list-user-minted-nft.script\";\nimport { MINT_NSFT } from \"../flow/mint-nsft.tx\";\nimport { authorizationFunction } from \"../services/authorization-function\";\nexport default function useUserNsfts(user, collection) {\n  _s();\n\n  const [state, dispatch] = useReducer(userNsftReducer, {\n    loading: false,\n    error: false,\n    data: []\n  });\n  const {\n    addTx\n  } = useTxs();\n  useEffect(() => {\n    const fetchUserMintedNsfts = async () => {\n      dispatch({\n        type: 'PROCESSING'\n      });\n\n      try {\n        let res = await query({\n          cadence: LIST_USER_OWNED_NFTS,\n          args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address)]\n        });\n        let minted_nsfts = res.filter(token => token.creatorAddress === (user === null || user === void 0 ? void 0 : user.addr));\n        dispatch({\n          type: 'SUCCESS',\n          payload: minted_nsfts\n        });\n      } catch (err) {\n        dispatch({\n          type: 'ERROR'\n        });\n      }\n    };\n\n    fetchUserMintedNsfts(); //eslint-disable-next-line\n  }, []);\n\n  const mintNsft = async (cid, fileType, title, description, editionSize) => {\n    if (!collection) {\n      return 'no collection';\n    }\n\n    try {\n      let res = await mutate({\n        cadence: MINT_NSFT,\n        args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address), arg(cid, t.String), arg(fileType, t.String), arg(title, t.String), arg(description, t.String), arg(editionSize, t.Int)],\n        limit: 500,\n        payer: authorizationFunction\n      });\n      addTx(res);\n      await tx(res).onceSealed();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return { ...state,\n    mintNsft\n  };\n}\n\n_s(useUserNsfts, \"XtPX5PhjGudlS0z66Ms9uB28BWM=\", false, function () {\n  return [useTxs];\n});","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft-v3/client/src/hooks/use-user-nsfts.hook.js"],"names":["useEffect","useReducer","userNsftReducer","mutate","query","tx","useTxs","LIST_USER_OWNED_NFTS","MINT_NSFT","authorizationFunction","useUserNsfts","user","collection","state","dispatch","loading","error","data","addTx","fetchUserMintedNsfts","type","res","cadence","args","arg","t","addr","Address","minted_nsfts","filter","token","creatorAddress","payload","err","mintNsft","cid","fileType","title","description","editionSize","String","Int","limit","payer","onceSealed","console","log"],"mappings":"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","sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport { userNsftReducer } from \"../reducer/userNsftReducer\";\nimport { mutate, query, tx } from '@onflow/fcl';\nimport { useTxs } from \"../providers/TxProvider\";\nimport { LIST_USER_OWNED_NFTS } from \"../flow/list-user-minted-nft.script\";\nimport { MINT_NSFT } from \"../flow/mint-nsft.tx\";\nimport { authorizationFunction } from \"../services/authorization-function\";\n\nexport default function useUserNsfts(user, collection) {\n    const [state, dispatch] = useReducer(userNsftReducer, {\n        loading: false,\n        error: false,\n        data: []\n    })\n\n    const { addTx } = useTxs()\n\n    useEffect(() => {\n        const fetchUserMintedNsfts = async () => {\n            dispatch({ type: 'PROCESSING' })\n            try {\n                let res = await query({\n                    cadence: LIST_USER_OWNED_NFTS,\n                    args: (arg, t) => [arg(user?.addr, t.Address)]\n                })\n                let minted_nsfts = res.filter(token => token.creatorAddress === user?.addr)\n                dispatch({ type: 'SUCCESS', payload: minted_nsfts })\n            } catch (err) {\n                dispatch({ type: 'ERROR' })\n            }\n        }\n        fetchUserMintedNsfts()\n        //eslint-disable-next-line\n    }, [])\n\n    const mintNsft = async (cid, fileType, title, description, editionSize) => {\n        if(!collection) {\n            return 'no collection'\n          }\n\n        try {\n            let res = await mutate({\n                cadence: MINT_NSFT,\n                args: (arg, t) => [\n                    arg(user?.addr, t.Address),\n                    arg(cid, t.String),\n                    arg(fileType, t.String),\n                    arg(title, t.String),\n                    arg(description, t.String),\n                    arg(editionSize, t.Int),\n                  ],\n                  limit: 500,\n                  payer: authorizationFunction\n            })\n            addTx(res)\n            await tx(res).onceSealed()\n        } catch(err) {\n            console.log(err)\n        }\n    }\n\n    return {\n        ...state,\n        mintNsft\n    }\n}"]},"metadata":{},"sourceType":"module"}