{"ast":null,"code":"export const CREATE_FUSD_VAULT = `\nimport FungibleToken from 0xFungibleToken\nimport FUSD from 0xFUSD\n\ntransaction {\n  prepare(signer: AuthAccount) {\n    if(signer.borrow<&FUSD.Vault>(from: /storage/fusdVault) != nil) {\n      return\n    }\n\n    signer.save(<- FUSD.createEmptyVault(), to: /storage/fusdVault)\n\n    signer.link<&FUSD.Vault{FungibleToken.Receiver}>(/public/fusdReceiver, target: /storage/fusdVault)\n\n    signer.link<&FUSD.Vault{FungibleToken.Balance}>(/public/fusdBalance, target: /storage/fusdVault)\n  }\n\n}\n`;","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft-v3/src/flow/create-fusd-vault.tx.js"],"names":["CREATE_FUSD_VAULT"],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBO","sourcesContent":["export const CREATE_FUSD_VAULT = `\nimport FungibleToken from 0xFungibleToken\nimport FUSD from 0xFUSD\n\ntransaction {\n  prepare(signer: AuthAccount) {\n    if(signer.borrow<&FUSD.Vault>(from: /storage/fusdVault) != nil) {\n      return\n    }\n\n    signer.save(<- FUSD.createEmptyVault(), to: /storage/fusdVault)\n\n    signer.link<&FUSD.Vault{FungibleToken.Receiver}>(/public/fusdReceiver, target: /storage/fusdVault)\n\n    signer.link<&FUSD.Vault{FungibleToken.Balance}>(/public/fusdBalance, target: /storage/fusdVault)\n  }\n\n}\n`"]},"metadata":{},"sourceType":"module"}