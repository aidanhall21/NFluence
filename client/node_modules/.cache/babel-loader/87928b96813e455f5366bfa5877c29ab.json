{"ast":null,"code":"var _jsxFileName = \"/Users/aidanhall/Desktop/crypto-dappy/src/providers/TxProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport TxDetails from '../components/TxDetails';\nimport Spinner from '../components/Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst txContext = /*#__PURE__*/React.createContext();\nexport default function TxProvider({\n  children\n}) {\n  _s();\n\n  const [txs, setTxs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    getLocalTxs(); //eslint-disable-next-line\n  }, []);\n\n  const renderTxs = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"txs__list\",\n      children: txs.map(tx => /*#__PURE__*/_jsxDEV(TxDetails, {\n        id: tx === null || tx === void 0 ? void 0 : tx.id\n      }, tx === null || tx === void 0 ? void 0 : tx.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 24\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  };\n\n  const getLocalTxs = async () => {\n    setTxs([]);\n    setLoading(false);\n  };\n\n  const addTx = txID => {\n    console.log(\"Add txID\");\n  };\n\n  if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(txContext.Provider, {\n    value: {\n      runningTxs: txs.length !== 0,\n      addTx\n    },\n    children: [renderTxs(), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TxProvider, \"/6nl1jwARyzT5sCyjf7N5Yxf86w=\");\n\n_c = TxProvider;\nexport function useTxs() {\n  _s2();\n\n  return useContext(txContext);\n}\n\n_s2(useTxs, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"TxProvider\");","map":{"version":3,"sources":["/Users/aidanhall/Desktop/crypto-dappy/src/providers/TxProvider.js"],"names":["React","useContext","useEffect","useState","TxDetails","Spinner","txContext","createContext","TxProvider","children","txs","setTxs","loading","setLoading","getLocalTxs","renderTxs","map","tx","id","addTx","txID","console","log","runningTxs","length","useTxs"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;AAEA,MAAMC,SAAS,gBAAGN,KAAK,CAACO,aAAN,EAAlB;AAEA,eAAe,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAkC;AAAA;;AAC/C,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBR,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,WAAW,GADG,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMC,SAAS,GAAG,MAAM;AACtB,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBACGL,GAAG,CAACM,GAAJ,CAAQC,EAAE,iBAAI,QAAC,SAAD;AAAW,QAAA,EAAE,EAAEA,EAAF,aAAEA,EAAF,uBAAEA,EAAE,CAAEC;AAAnB,SAA4BD,EAA5B,aAA4BA,EAA5B,uBAA4BA,EAAE,CAAEC,EAAhC;AAAA;AAAA;AAAA;AAAA,cAAd;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAND;;AAQA,QAAMJ,WAAW,GAAG,YAAY;AAC9BH,IAAAA,MAAM,CAAC,EAAD,CAAN;AACAE,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAHD;;AAKA,QAAMM,KAAK,GAAIC,IAAD,IAAU;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD,GAFD;;AAIA,MAAIV,OAAJ,EAAa,oBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AAEb,sBACE,QAAC,SAAD,CAAW,QAAX;AAAoB,IAAA,KAAK,EAAE;AACzBW,MAAAA,UAAU,EAAEb,GAAG,CAACc,MAAJ,KAAe,CADF;AAEzBL,MAAAA;AAFyB,KAA3B;AAAA,eAIGJ,SAAS,EAJZ,EAKGN,QALH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GArCuBD,U;;KAAAA,U;AAuCxB,OAAO,SAASiB,MAAT,GAAkB;AAAA;;AACvB,SAAOxB,UAAU,CAACK,SAAD,CAAjB;AACD;;IAFemB,M","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\n\nimport TxDetails from '../components/TxDetails'\nimport Spinner from '../components/Spinner'\n\nconst txContext = React.createContext()\n\nexport default function TxProvider({ children }) {\n  const [txs, setTxs] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    getLocalTxs()\n    //eslint-disable-next-line\n  }, [])\n\n  const renderTxs = () => {\n    return (\n      <div className='txs__list'>\n        {txs.map(tx => <TxDetails id={tx?.id} key={tx?.id} />)}\n      </div>\n    )\n  }\n\n  const getLocalTxs = async () => {\n    setTxs([])\n    setLoading(false)\n  }\n\n  const addTx = (txID) => {\n    console.log(\"Add txID\")\n  }\n\n  if (loading) return <Spinner />\n\n  return (\n    <txContext.Provider value={{\n      runningTxs: txs.length !== 0,\n      addTx,\n    }}>\n      {renderTxs()}\n      {children}\n    </txContext.Provider>\n  )\n}\n\nexport function useTxs() {\n  return useContext(txContext)\n}"]},"metadata":{},"sourceType":"module"}