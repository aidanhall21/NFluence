{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer } from \"react\";\nimport { userNsftReducer } from \"../reducer/userNsftReducer\";\nimport { mutate, query, tx } from '@onflow/fcl';\nimport { MINT_NSFT } from \"../flow/mint-nsft.tx\";\nimport { authorizationFunction } from \"../services/authorization-function\";\nimport { GET_TOKEN_DATA } from \"../flow/get-token-data.script\";\nimport { CREATE_AUCTION } from \"../flow/create-auction.tx\";\nimport { GET_AUCTION_IDS } from \"../flow/get-auction-ids.script\";\nimport { GET_SINGLE_AUCTION_DATA } from \"../flow/get-single-auction-data.script\";\nimport { SETTLE_AUCTION } from \"../flow/settle-auction.tx\";\nimport { BID_ON_AUCTION } from \"../flow/bid-auction.tx\";\nimport { GET_OWNED_IDS } from \"../flow/get-owned-token-ids.script\";\nexport default function useUserNsfts(user) {\n  _s();\n\n  const [state, dispatch] = useReducer(userNsftReducer, {\n    loading: false,\n    error: false,\n    minted_data: [],\n    auction_data: [],\n    owned_data: [],\n    owned_ids: [],\n    txStatus: {}\n  });\n\n  const fetchUserMintedNsfts = async () => {\n    dispatch({\n      type: 'PROCESSING'\n    });\n\n    try {\n      let res = await query({\n        cadence: GET_TOKEN_DATA,\n        args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address)]\n      });\n      console.log(res);\n      let minted_nsfts = [];\n\n      if (res !== null) {\n        minted_nsfts = res.filter(token => token.creatorAddress === (user === null || user === void 0 ? void 0 : user.addr));\n      }\n\n      dispatch({\n        type: 'MINTED_SUCCESS',\n        payload: minted_nsfts\n      });\n    } catch (err) {\n      console.log(err);\n      dispatch({\n        type: 'ERROR'\n      });\n    }\n  };\n\n  const fetchUserOwnedIds = async () => {\n    dispatch({\n      type: 'PROCESSING'\n    });\n\n    try {\n      let res = await query({\n        cadence: GET_OWNED_IDS,\n        args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address)]\n      });\n      console.log(res);\n      let owned_nsfts = [];\n\n      if (res !== null) {\n        owned_nsfts = res.filter(token => token.creatorAddress !== (user === null || user === void 0 ? void 0 : user.addr));\n      }\n\n      dispatch({\n        type: 'ID_SUCCESS',\n        payload: owned_nsfts\n      });\n    } catch (err) {\n      console.log(err);\n      dispatch({\n        type: 'ERROR'\n      });\n    }\n  };\n\n  const fetchUserOwnedNsfts = async () => {\n    dispatch({\n      type: 'PROCESSING'\n    });\n\n    try {\n      let res = await query({\n        cadence: GET_TOKEN_DATA,\n        args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address)]\n      });\n      console.log(res);\n      let owned_nsfts = [];\n\n      if (res !== null) {\n        owned_nsfts = res.filter(token => token.creatorAddress !== (user === null || user === void 0 ? void 0 : user.addr));\n      }\n\n      dispatch({\n        type: 'OWNED_SUCCESS',\n        payload: owned_nsfts\n      });\n    } catch (err) {\n      console.log(err);\n      dispatch({\n        type: 'ERROR'\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (!(user === null || user === void 0 ? void 0 : user.addr)) return;\n    fetchUserMintedNsfts();\n    fetchUserOwnedNsfts(); //eslint-disable-next-line\n  }, [user]);\n\n  const runScript = async (address, id) => {\n    let auction_data = await query({\n      cadence: GET_SINGLE_AUCTION_DATA,\n      args: (arg, t) => [arg(address, t.Address), arg(id, t.UInt64)]\n    });\n    const {\n      nftData\n    } = auction_data;\n    return { ...auction_data,\n      ...nftData\n    };\n  };\n\n  const fetchAuctionData = async (address, data) => {\n    return Promise.all(data.map(id => {\n      return runScript(address, id);\n    }));\n  };\n\n  useEffect(() => {\n    if (!(user === null || user === void 0 ? void 0 : user.addr)) return;\n\n    const fetchUserLiveAuctions = async () => {\n      dispatch({\n        type: 'PROCESSING'\n      });\n\n      try {\n        let res = await query({\n          cadence: GET_AUCTION_IDS,\n          args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address)]\n        });\n        let data = await fetchAuctionData(user === null || user === void 0 ? void 0 : user.addr, res);\n        dispatch({\n          type: 'AUCTION_SUCCESS',\n          payload: data\n        });\n      } catch (err) {\n        dispatch({\n          type: 'ERROR'\n        });\n      }\n    };\n\n    fetchUserLiveAuctions(); //eslint-disable-next-line\n  }, [user]);\n\n  const fetchAccountLiveAuctions = async address => {\n    try {\n      let res = await query({\n        cadence: GET_AUCTION_IDS,\n        args: (arg, t) => [arg(address, t.Address)]\n      });\n      let data = await fetchAuctionData(address, res);\n      return data;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  /*\n  const fetchAccountLiveBids = async (address) => {\n      try {\n          let res = await query({\n           })\n      } catch(err) {\n          console.log(err)\n      }\n  }\n  */\n\n\n  const addToAuction = async (nftid, price) => {\n    dispatch({\n      type: 'PROCESSING'\n    });\n\n    try {\n      let res = await mutate({\n        cadence: CREATE_AUCTION,\n        args: (arg, t) => [arg(nftid, t.UInt64), arg(price, t.UFix64)],\n        limit: 500\n      });\n      let txStatus = await tx(res).onceSealed();\n      console.log(txStatus);\n      dispatch({\n        type: 'TX_SUCCESS',\n        payload: txStatus\n      });\n      return txStatus;\n    } catch (err) {\n      console.log(err);\n      dispatch({\n        type: 'ERROR'\n      });\n    }\n  };\n\n  const bidOnAuction = async (nftid, address, price) => {\n    dispatch({\n      type: 'PROCESSING'\n    });\n\n    try {\n      let res = await mutate({\n        cadence: BID_ON_AUCTION,\n        args: (arg, t) => [arg(nftid, t.UInt64), arg(address, t.Address), arg(price, t.UFix64)],\n        limit: 150\n      });\n      let txStatus = await tx(res).onceSealed();\n      console.log(txStatus);\n      dispatch({\n        type: 'TX_SUCCESS',\n        payload: txStatus\n      });\n    } catch (err) {\n      console.log(err);\n      dispatch({\n        type: 'ERROR'\n      });\n    }\n  };\n\n  const settleAuction = async nftid => {\n    console.log(state.error);\n    dispatch({\n      type: 'PROCESSING'\n    });\n\n    try {\n      let res = await mutate({\n        cadence: SETTLE_AUCTION,\n        args: (arg, t) => [arg(nftid, t.UInt64)],\n        limit: 500\n      });\n      let txStatus = await tx(res).onceSealed();\n      console.log(txStatus);\n      dispatch({\n        type: 'TX_SUCCESS',\n        payload: txStatus\n      });\n      return txStatus;\n    } catch (err) {\n      console.log(err);\n      dispatch({\n        type: 'ERROR'\n      });\n    }\n  };\n\n  const mintNsft = async (cid, fileType, title, description, editionSize) => {\n    dispatch({\n      type: 'PROCESSING'\n    });\n\n    try {\n      let res = await mutate({\n        cadence: MINT_NSFT,\n        args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address), arg(cid, t.String), arg(fileType, t.UInt8), arg(title, t.String), arg(description, t.String), arg(editionSize, t.UInt16)],\n        limit: 500,\n        authz: authorizationFunction\n      }); //addTx(res)\n\n      let txStatus = await tx(res).onceSealed();\n      dispatch({\n        type: 'TX_SUCCESS',\n        payload: txStatus\n      });\n      return txStatus;\n    } catch (err) {\n      console.log(err);\n      dispatch({\n        type: 'ERROR'\n      });\n    }\n  };\n\n  return { ...state,\n    mintNsft,\n    addToAuction,\n    settleAuction,\n    fetchAccountLiveAuctions,\n    fetchUserMintedNsfts,\n    fetchUserOwnedNsfts,\n    fetchUserOwnedIds,\n    bidOnAuction\n  };\n}\n\n_s(useUserNsfts, \"hDBxCXJHksS65VwX7UV8FnxYxpk=\");","map":{"version":3,"sources":["/Users/aidanhall/Desktop/nsft/client/src/hooks/use-user-nsfts.hook.js"],"names":["useEffect","useReducer","userNsftReducer","mutate","query","tx","MINT_NSFT","authorizationFunction","GET_TOKEN_DATA","CREATE_AUCTION","GET_AUCTION_IDS","GET_SINGLE_AUCTION_DATA","SETTLE_AUCTION","BID_ON_AUCTION","GET_OWNED_IDS","useUserNsfts","user","state","dispatch","loading","error","minted_data","auction_data","owned_data","owned_ids","txStatus","fetchUserMintedNsfts","type","res","cadence","args","arg","t","addr","Address","console","log","minted_nsfts","filter","token","creatorAddress","payload","err","fetchUserOwnedIds","owned_nsfts","fetchUserOwnedNsfts","runScript","address","id","UInt64","nftData","fetchAuctionData","data","Promise","all","map","fetchUserLiveAuctions","fetchAccountLiveAuctions","addToAuction","nftid","price","UFix64","limit","onceSealed","bidOnAuction","settleAuction","mintNsft","cid","fileType","title","description","editionSize","String","UInt8","UInt16","authz"],"mappings":"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","sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport { userNsftReducer } from \"../reducer/userNsftReducer\";\nimport { mutate, query, tx } from '@onflow/fcl';\nimport { MINT_NSFT } from \"../flow/mint-nsft.tx\";\nimport { authorizationFunction } from \"../services/authorization-function\";\nimport { GET_TOKEN_DATA } from \"../flow/get-token-data.script\";\nimport { CREATE_AUCTION } from \"../flow/create-auction.tx\";\nimport { GET_AUCTION_IDS } from \"../flow/get-auction-ids.script\";\nimport { GET_SINGLE_AUCTION_DATA } from \"../flow/get-single-auction-data.script\";\nimport { SETTLE_AUCTION } from \"../flow/settle-auction.tx\";\nimport { BID_ON_AUCTION } from \"../flow/bid-auction.tx\";\nimport { GET_OWNED_IDS } from \"../flow/get-owned-token-ids.script\";\n\nexport default function useUserNsfts(user) {\n    const [state, dispatch] = useReducer(userNsftReducer, {\n        loading: false,\n        error: false,\n        minted_data: [],\n        auction_data: [],\n        owned_data: [],\n        owned_ids: [],\n        txStatus: {}\n    })\n\n    const fetchUserMintedNsfts = async () => {\n        dispatch({ type: 'PROCESSING' })\n        try {\n            let res = await query({\n                cadence: GET_TOKEN_DATA,\n                args: (arg, t) => [arg(user?.addr, t.Address)]\n            })\n            console.log(res)\n            let minted_nsfts = []\n            if (res !== null) {\n                minted_nsfts = res.filter(token => token.creatorAddress === user?.addr)\n            }\n            dispatch({ type: 'MINTED_SUCCESS', payload: minted_nsfts })\n        } catch (err) {\n            console.log(err)\n            dispatch({ type: 'ERROR' })\n        }\n    }\n\n    const fetchUserOwnedIds = async () => {\n        dispatch({ type: 'PROCESSING' })\n        try {\n            let res = await query({\n                cadence: GET_OWNED_IDS,\n                args: (arg, t) => [arg(user?.addr, t.Address)]\n            })\n            console.log(res)\n            let owned_nsfts = []\n            if (res !== null) {\n                owned_nsfts = res.filter(token => token.creatorAddress !== user?.addr)\n            }\n            dispatch({ type: 'ID_SUCCESS', payload: owned_nsfts })\n        } catch(err) {\n            console.log(err)\n            dispatch({ type: 'ERROR' })\n        }\n    }\n\n    const fetchUserOwnedNsfts = async () => {\n        dispatch({ type: 'PROCESSING' })\n        try {\n            let res = await query({\n                cadence: GET_TOKEN_DATA,\n                args: (arg, t) => [arg(user?.addr, t.Address)]\n            })\n            console.log(res)\n            let owned_nsfts = []\n            if (res !== null) {\n                owned_nsfts = res.filter(token => token.creatorAddress !== user?.addr)\n            }\n            dispatch({ type: 'OWNED_SUCCESS', payload: owned_nsfts })\n        } catch (err) {\n            console.log(err)\n            dispatch({ type: 'ERROR' })\n        }\n    }\n\n    useEffect(() => {\n        if(!user?.addr) return\n        fetchUserMintedNsfts()\n        fetchUserOwnedNsfts()\n        //eslint-disable-next-line\n    }, [user])\n\n    const runScript = async (address, id) => {\n        let auction_data = await query({\n            cadence: GET_SINGLE_AUCTION_DATA,\n            args: (arg, t) => [arg(address, t.Address), arg(id, t.UInt64)]\n        })\n        const { nftData } = auction_data\n        return {...auction_data, ...nftData}\n    }\n\n    const fetchAuctionData = async (address, data) => {\n        return Promise.all(data.map((id) => {\n            return runScript(address, id)\n        }))\n    }\n\n    useEffect(() => {\n        if(!user?.addr) return\n        const fetchUserLiveAuctions = async () => {\n            dispatch({ type: 'PROCESSING' })\n            try {\n                let res = await query({\n                    cadence: GET_AUCTION_IDS,\n                    args: (arg, t) => [arg(user?.addr, t.Address)]\n                })\n                let data = await fetchAuctionData(user?.addr, res)\n                dispatch({ type: 'AUCTION_SUCCESS', payload: data })\n            } catch(err) {\n                dispatch({ type: 'ERROR' })\n            }\n        }\n        fetchUserLiveAuctions()\n        //eslint-disable-next-line\n    }, [user])\n\n    const fetchAccountLiveAuctions = async (address) => {\n        try {\n            let res = await query({\n                cadence: GET_AUCTION_IDS,\n                args: (arg, t) => [arg(address, t.Address)]\n            })\n            let data = await fetchAuctionData(address, res)\n            return data\n        } catch(err) {\n            console.log(err)\n        }\n    }\n\n    /*\n    const fetchAccountLiveBids = async (address) => {\n        try {\n            let res = await query({\n\n            })\n        } catch(err) {\n            console.log(err)\n        }\n    }\n    */\n\n    const addToAuction = async (nftid, price) => {\n        dispatch({ type: 'PROCESSING' })\n        try {\n            let res = await mutate({\n                cadence: CREATE_AUCTION,\n                args: (arg, t) => [\n                    arg(nftid, t.UInt64),\n                    arg(price, t.UFix64)\n                ],\n                limit: 500\n            })\n            let txStatus = await tx(res).onceSealed()\n            console.log(txStatus)\n            dispatch({ type: 'TX_SUCCESS', payload: txStatus })\n            return txStatus\n        } catch(err) {\n            console.log(err)\n            dispatch({ type: 'ERROR' })\n        }\n    }\n\n    const bidOnAuction = async (nftid, address, price) => {\n        dispatch({ type: 'PROCESSING' })\n        try {\n            let res = await mutate({\n                cadence: BID_ON_AUCTION,\n                args: (arg, t) => [arg(nftid, t.UInt64), arg(address, t.Address), arg(price, t.UFix64)],\n                limit: 150\n            })\n            let txStatus = await tx(res).onceSealed()\n            console.log(txStatus)\n            dispatch({ type: 'TX_SUCCESS', payload: txStatus })\n        } catch(err) {\n            console.log(err)\n            dispatch({ type: 'ERROR' })\n        }\n    }\n\n    const settleAuction = async (nftid) => {\n        console.log(state.error)\n        dispatch({ type: 'PROCESSING' })\n        try {\n            let res = await mutate({\n                cadence: SETTLE_AUCTION,\n                args: (arg, t) => [arg(nftid, t.UInt64)],\n                limit: 500\n            })\n            let txStatus = await tx(res).onceSealed()\n            console.log(txStatus)\n            dispatch({ type: 'TX_SUCCESS', payload: txStatus })\n            return txStatus\n        } catch(err) {\n            console.log(err)\n            dispatch({ type: 'ERROR' })\n        }\n    }\n\n    const mintNsft = async (cid, fileType, title, description, editionSize) => {\n        dispatch({ type: 'PROCESSING' })\n        try {\n            let res = await mutate({\n                cadence: MINT_NSFT,\n                args: (arg, t) => [\n                    arg(user?.addr, t.Address),\n                    arg(cid, t.String),\n                    arg(fileType, t.UInt8),\n                    arg(title, t.String),\n                    arg(description, t.String),\n                    arg(editionSize, t.UInt16),\n                  ],\n                  limit: 500,\n                  authz: authorizationFunction\n            })\n            //addTx(res)\n            let txStatus = await tx(res).onceSealed()\n            dispatch({ type: 'TX_SUCCESS', payload: txStatus })\n            return txStatus\n        } catch(err) {\n            console.log(err)\n            dispatch({ type: 'ERROR' })\n        }\n    }\n\n    return {\n        ...state,\n        mintNsft,\n        addToAuction,\n        settleAuction,\n        fetchAccountLiveAuctions,\n        fetchUserMintedNsfts,\n        fetchUserOwnedNsfts,\n        fetchUserOwnedIds,\n        bidOnAuction\n    }\n}"]},"metadata":{},"sourceType":"module"}